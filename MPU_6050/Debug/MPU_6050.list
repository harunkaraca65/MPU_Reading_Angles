
MPU_6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005b10  08005b10  00006b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d10  08005d10  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005d18  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          00000268  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a588  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001507  00000000  00000000  00011628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  00012b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000878  00000000  00000000  00013408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020525  00000000  00000000  00013c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000baab  00000000  00000000  000341a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c541c  00000000  00000000  0003fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010506c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b50  00000000  00000000  001050b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005af8 	.word	0x08005af8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005af8 	.word	0x08005af8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e88:	f000 fe5a 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 fc1c 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 fcdc 	bl	800184c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e94:	f000 fc82 	bl	800179c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e98:	f000 fcae 	bl	80017f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  data = 0x00;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <main+0x84>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <main+0x84>)
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	226b      	movs	r2, #107	@ 0x6b
 8000eb4:	21d0      	movs	r1, #208	@ 0xd0
 8000eb6:	4814      	ldr	r0, [pc, #80]	@ (8000f08 <main+0x88>)
 8000eb8:	f001 fe02 	bl	8002ac0 <HAL_I2C_Mem_Write>

  data = 0x08;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <main+0x84>)
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, GYRO_CNFG_REG , 1, &data, 1, HAL_MAX_DELAY);
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <main+0x84>)
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	221b      	movs	r2, #27
 8000ed4:	21d0      	movs	r1, #208	@ 0xd0
 8000ed6:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <main+0x88>)
 8000ed8:	f001 fdf2 	bl	8002ac0 <HAL_I2C_Mem_Write>

  data = 0x10;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <main+0x84>)
 8000ede:	2210      	movs	r2, #16
 8000ee0:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <main+0x84>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	221c      	movs	r2, #28
 8000ef4:	21d0      	movs	r1, #208	@ 0xd0
 8000ef6:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <main+0x88>)
 8000ef8:	f001 fde2 	bl	8002ac0 <HAL_I2C_Mem_Write>

  for (i = 0; i < 2000; i++)
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <main+0x8c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e08c      	b.n	800101e <main+0x19e>
 8000f04:	20000128 	.word	0x20000128
 8000f08:	2000008c 	.word	0x2000008c
 8000f0c:	20000178 	.word	0x20000178
  {
	prevtime2 = time2;
 8000f10:	4bb3      	ldr	r3, [pc, #716]	@ (80011e0 <main+0x360>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4ab3      	ldr	r2, [pc, #716]	@ (80011e4 <main+0x364>)
 8000f16:	6013      	str	r3, [r2, #0]
	time2 = HAL_GetTick();
 8000f18:	f000 fe78 	bl	8001c0c <HAL_GetTick>
 8000f1c:	ee07 0a90 	vmov	s15, r0
 8000f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f24:	4bae      	ldr	r3, [pc, #696]	@ (80011e0 <main+0x360>)
 8000f26:	edc3 7a00 	vstr	s15, [r3]
	elapsedtime2 = (time2 - prevtime2 )*1000;
 8000f2a:	4bad      	ldr	r3, [pc, #692]	@ (80011e0 <main+0x360>)
 8000f2c:	ed93 7a00 	vldr	s14, [r3]
 8000f30:	4bac      	ldr	r3, [pc, #688]	@ (80011e4 <main+0x364>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80011e8 <main+0x368>
 8000f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f42:	4baa      	ldr	r3, [pc, #680]	@ (80011ec <main+0x36c>)
 8000f44:	edc3 7a00 	vstr	s15, [r3]

	cuffer[0] = 0x43;
 8000f48:	4ba9      	ldr	r3, [pc, #676]	@ (80011f0 <main+0x370>)
 8000f4a:	2243      	movs	r2, #67	@ 0x43
 8000f4c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit (&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY);
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	4aa6      	ldr	r2, [pc, #664]	@ (80011f0 <main+0x370>)
 8000f58:	21d0      	movs	r1, #208	@ 0xd0
 8000f5a:	48a6      	ldr	r0, [pc, #664]	@ (80011f4 <main+0x374>)
 8000f5c:	f001 fa80 	bl	8002460 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive  (&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY);
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2306      	movs	r3, #6
 8000f68:	4aa1      	ldr	r2, [pc, #644]	@ (80011f0 <main+0x370>)
 8000f6a:	21d0      	movs	r1, #208	@ 0xd0
 8000f6c:	48a1      	ldr	r0, [pc, #644]	@ (80011f4 <main+0x374>)
 8000f6e:	f001 fb75 	bl	800265c <HAL_I2C_Master_Receive>

	gyro_raw[0]    = (cuffer[0] << 8 | cuffer [1]);
 8000f72:	4b9f      	ldr	r3, [pc, #636]	@ (80011f0 <main+0x370>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	4b9d      	ldr	r3, [pc, #628]	@ (80011f0 <main+0x370>)
 8000f7c:	785b      	ldrb	r3, [r3, #1]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	4b9c      	ldr	r3, [pc, #624]	@ (80011f8 <main+0x378>)
 8000f86:	801a      	strh	r2, [r3, #0]
	gyro_raw[1]    = (cuffer[2] << 8 | cuffer [3]);
 8000f88:	4b99      	ldr	r3, [pc, #612]	@ (80011f0 <main+0x370>)
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b97      	ldr	r3, [pc, #604]	@ (80011f0 <main+0x370>)
 8000f92:	78db      	ldrb	r3, [r3, #3]
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b97      	ldr	r3, [pc, #604]	@ (80011f8 <main+0x378>)
 8000f9c:	805a      	strh	r2, [r3, #2]
	gyro_raw[2]    = (cuffer[4] << 8 | cuffer [5]);
 8000f9e:	4b94      	ldr	r3, [pc, #592]	@ (80011f0 <main+0x370>)
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	4b92      	ldr	r3, [pc, #584]	@ (80011f0 <main+0x370>)
 8000fa8:	795b      	ldrb	r3, [r3, #5]
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	4b91      	ldr	r3, [pc, #580]	@ (80011f8 <main+0x378>)
 8000fb2:	809a      	strh	r2, [r3, #4]

	gyro_cal[0] += gyro_raw[0];
 8000fb4:	4b91      	ldr	r3, [pc, #580]	@ (80011fc <main+0x37c>)
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	4b8f      	ldr	r3, [pc, #572]	@ (80011f8 <main+0x378>)
 8000fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fcc:	4b8b      	ldr	r3, [pc, #556]	@ (80011fc <main+0x37c>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]
	gyro_cal[1] += gyro_raw[1];
 8000fd2:	4b8a      	ldr	r3, [pc, #552]	@ (80011fc <main+0x37c>)
 8000fd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fd8:	4b87      	ldr	r3, [pc, #540]	@ (80011f8 <main+0x378>)
 8000fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fea:	4b84      	ldr	r3, [pc, #528]	@ (80011fc <main+0x37c>)
 8000fec:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_cal[2] += gyro_raw[2];
 8000ff0:	4b82      	ldr	r3, [pc, #520]	@ (80011fc <main+0x37c>)
 8000ff2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ff6:	4b80      	ldr	r3, [pc, #512]	@ (80011f8 <main+0x378>)
 8000ff8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001008:	4b7c      	ldr	r3, [pc, #496]	@ (80011fc <main+0x37c>)
 800100a:	edc3 7a02 	vstr	s15, [r3, #8]

	HAL_Delay(3);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 fe08 	bl	8001c24 <HAL_Delay>
  for (i = 0; i < 2000; i++)
 8001014:	4b7a      	ldr	r3, [pc, #488]	@ (8001200 <main+0x380>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a79      	ldr	r2, [pc, #484]	@ (8001200 <main+0x380>)
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b78      	ldr	r3, [pc, #480]	@ (8001200 <main+0x380>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001026:	f6ff af73 	blt.w	8000f10 <main+0x90>
  }

  gyro_cal[0] /= 2000;
 800102a:	4b74      	ldr	r3, [pc, #464]	@ (80011fc <main+0x37c>)
 800102c:	ed93 7a00 	vldr	s14, [r3]
 8001030:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8001204 <main+0x384>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	4b70      	ldr	r3, [pc, #448]	@ (80011fc <main+0x37c>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
  gyro_cal[1] /= 2000;
 800103e:	4b6f      	ldr	r3, [pc, #444]	@ (80011fc <main+0x37c>)
 8001040:	ed93 7a01 	vldr	s14, [r3, #4]
 8001044:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8001204 <main+0x384>
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	4b6b      	ldr	r3, [pc, #428]	@ (80011fc <main+0x37c>)
 800104e:	edc3 7a01 	vstr	s15, [r3, #4]
  gyro_cal[2] /= 2000;
 8001052:	4b6a      	ldr	r3, [pc, #424]	@ (80011fc <main+0x37c>)
 8001054:	ed93 7a02 	vldr	s14, [r3, #8]
 8001058:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8001204 <main+0x384>
 800105c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001060:	4b66      	ldr	r3, [pc, #408]	@ (80011fc <main+0x37c>)
 8001062:	edc3 7a02 	vstr	s15, [r3, #8]

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001066:	2120      	movs	r1, #32
 8001068:	4867      	ldr	r0, [pc, #412]	@ (8001208 <main+0x388>)
 800106a:	f001 f89a 	bl	80021a2 <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 800106e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001072:	f000 fdd7 	bl	8001c24 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		prevtime1 = time1;
 8001076:	4b65      	ldr	r3, [pc, #404]	@ (800120c <main+0x38c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a65      	ldr	r2, [pc, #404]	@ (8001210 <main+0x390>)
 800107c:	6013      	str	r3, [r2, #0]
		time1 = HAL_GetTick();
 800107e:	f000 fdc5 	bl	8001c0c <HAL_GetTick>
 8001082:	ee07 0a90 	vmov	s15, r0
 8001086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108a:	4b60      	ldr	r3, [pc, #384]	@ (800120c <main+0x38c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]
		elapsedtime1 = (time1 - prevtime1 )*1000;
 8001090:	4b5e      	ldr	r3, [pc, #376]	@ (800120c <main+0x38c>)
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	4b5e      	ldr	r3, [pc, #376]	@ (8001210 <main+0x390>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80011e8 <main+0x368>
 80010a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001214 <main+0x394>)
 80010aa:	edc3 7a00 	vstr	s15, [r3]

		tuffer[0] = 0x3B;
 80010ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001218 <main+0x398>)
 80010b0:	223b      	movs	r2, #59	@ 0x3b
 80010b2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit (&hi2c1, MPU6050_ADDR, tuffer, 1, HAL_MAX_DELAY);
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	4a56      	ldr	r2, [pc, #344]	@ (8001218 <main+0x398>)
 80010be:	21d0      	movs	r1, #208	@ 0xd0
 80010c0:	484c      	ldr	r0, [pc, #304]	@ (80011f4 <main+0x374>)
 80010c2:	f001 f9cd 	bl	8002460 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive  (&hi2c1, MPU6050_ADDR, tuffer, 6, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2306      	movs	r3, #6
 80010ce:	4a52      	ldr	r2, [pc, #328]	@ (8001218 <main+0x398>)
 80010d0:	21d0      	movs	r1, #208	@ 0xd0
 80010d2:	4848      	ldr	r0, [pc, #288]	@ (80011f4 <main+0x374>)
 80010d4:	f001 fac2 	bl	800265c <HAL_I2C_Master_Receive>

		acc_raw[0]    = (tuffer[0] << 8 | tuffer [1]);
 80010d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001218 <main+0x398>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001218 <main+0x398>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b4c      	ldr	r3, [pc, #304]	@ (800121c <main+0x39c>)
 80010ec:	801a      	strh	r2, [r3, #0]
		acc_raw[1]    = (tuffer[2] << 8 | tuffer [3]);
 80010ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001218 <main+0x398>)
 80010f0:	789b      	ldrb	r3, [r3, #2]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b48      	ldr	r3, [pc, #288]	@ (8001218 <main+0x398>)
 80010f8:	78db      	ldrb	r3, [r3, #3]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b46      	ldr	r3, [pc, #280]	@ (800121c <main+0x39c>)
 8001102:	805a      	strh	r2, [r3, #2]
		acc_raw[2]    = (tuffer[4] << 8 | tuffer [5]);
 8001104:	4b44      	ldr	r3, [pc, #272]	@ (8001218 <main+0x398>)
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b42      	ldr	r3, [pc, #264]	@ (8001218 <main+0x398>)
 800110e:	795b      	ldrb	r3, [r3, #5]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b41      	ldr	r3, [pc, #260]	@ (800121c <main+0x39c>)
 8001118:	809a      	strh	r2, [r3, #4]



		buffer[0] = 0x41;
 800111a:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <main+0x3a0>)
 800111c:	2241      	movs	r2, #65	@ 0x41
 800111e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit (&hi2c1, MPU6050_ADDR, buffer, 1, HAL_MAX_DELAY);
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	4a3d      	ldr	r2, [pc, #244]	@ (8001220 <main+0x3a0>)
 800112a:	21d0      	movs	r1, #208	@ 0xd0
 800112c:	4831      	ldr	r0, [pc, #196]	@ (80011f4 <main+0x374>)
 800112e:	f001 f997 	bl	8002460 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive  (&hi2c1, MPU6050_ADDR, buffer, 2, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2302      	movs	r3, #2
 800113a:	4a39      	ldr	r2, [pc, #228]	@ (8001220 <main+0x3a0>)
 800113c:	21d0      	movs	r1, #208	@ 0xd0
 800113e:	482d      	ldr	r0, [pc, #180]	@ (80011f4 <main+0x374>)
 8001140:	f001 fa8c 	bl	800265c <HAL_I2C_Master_Receive>

		raw_temp = (buffer[0] << 8 | buffer[1]);
 8001144:	4b36      	ldr	r3, [pc, #216]	@ (8001220 <main+0x3a0>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <main+0x3a0>)
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <main+0x3a4>)
 8001158:	801a      	strh	r2, [r3, #0]
		temp = (raw_temp / 340.0) + 36.53;
 800115a:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <main+0x3a4>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f983 	bl	800046c <__aeabi_i2d>
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b2f      	ldr	r3, [pc, #188]	@ (8001228 <main+0x3a8>)
 800116c:	f7ff fb12 	bl	8000794 <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	a317      	add	r3, pc, #92	@ (adr r3, 80011d8 <main+0x358>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff f829 	bl	80001d4 <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fcb1 	bl	8000af0 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	4a26      	ldr	r2, [pc, #152]	@ (800122c <main+0x3ac>)
 8001192:	6013      	str	r3, [r2, #0]


		cuffer[0] = 0x43;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <main+0x370>)
 8001196:	2243      	movs	r2, #67	@ 0x43
 8001198:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit (&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <main+0x370>)
 80011a4:	21d0      	movs	r1, #208	@ 0xd0
 80011a6:	4813      	ldr	r0, [pc, #76]	@ (80011f4 <main+0x374>)
 80011a8:	f001 f95a 	bl	8002460 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive  (&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY);
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2306      	movs	r3, #6
 80011b4:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <main+0x370>)
 80011b6:	21d0      	movs	r1, #208	@ 0xd0
 80011b8:	480e      	ldr	r0, [pc, #56]	@ (80011f4 <main+0x374>)
 80011ba:	f001 fa4f 	bl	800265c <HAL_I2C_Master_Receive>

		gyro_raw[0]    = (cuffer[0] << 8 | cuffer [1]);
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <main+0x370>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <main+0x370>)
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <main+0x378>)
 80011d2:	801a      	strh	r2, [r3, #0]
 80011d4:	e02c      	b.n	8001230 <main+0x3b0>
 80011d6:	bf00      	nop
 80011d8:	0a3d70a4 	.word	0x0a3d70a4
 80011dc:	404243d7 	.word	0x404243d7
 80011e0:	20000190 	.word	0x20000190
 80011e4:	2000018c 	.word	0x2000018c
 80011e8:	447a0000 	.word	0x447a0000
 80011ec:	20000194 	.word	0x20000194
 80011f0:	20000130 	.word	0x20000130
 80011f4:	2000008c 	.word	0x2000008c
 80011f8:	20000138 	.word	0x20000138
 80011fc:	20000148 	.word	0x20000148
 8001200:	20000178 	.word	0x20000178
 8001204:	44fa0000 	.word	0x44fa0000
 8001208:	40020000 	.word	0x40020000
 800120c:	20000184 	.word	0x20000184
 8001210:	20000180 	.word	0x20000180
 8001214:	20000188 	.word	0x20000188
 8001218:	20000134 	.word	0x20000134
 800121c:	20000140 	.word	0x20000140
 8001220:	2000012c 	.word	0x2000012c
 8001224:	20000170 	.word	0x20000170
 8001228:	40754000 	.word	0x40754000
 800122c:	20000174 	.word	0x20000174
		gyro_raw[1]    = (cuffer[2] << 8 | cuffer [3]);
 8001230:	4bcd      	ldr	r3, [pc, #820]	@ (8001568 <main+0x6e8>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b21a      	sxth	r2, r3
 8001238:	4bcb      	ldr	r3, [pc, #812]	@ (8001568 <main+0x6e8>)
 800123a:	78db      	ldrb	r3, [r3, #3]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21a      	sxth	r2, r3
 8001242:	4bca      	ldr	r3, [pc, #808]	@ (800156c <main+0x6ec>)
 8001244:	805a      	strh	r2, [r3, #2]
		gyro_raw[2]    = (cuffer[4] << 8 | cuffer [5]);
 8001246:	4bc8      	ldr	r3, [pc, #800]	@ (8001568 <main+0x6e8>)
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	4bc6      	ldr	r3, [pc, #792]	@ (8001568 <main+0x6e8>)
 8001250:	795b      	ldrb	r3, [r3, #5]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	4bc4      	ldr	r3, [pc, #784]	@ (800156c <main+0x6ec>)
 800125a:	809a      	strh	r2, [r3, #4]

		gyro_raw[0] -= gyro_cal[0];
 800125c:	4bc3      	ldr	r3, [pc, #780]	@ (800156c <main+0x6ec>)
 800125e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126a:	4bc1      	ldr	r3, [pc, #772]	@ (8001570 <main+0x6f0>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001278:	ee17 3a90 	vmov	r3, s15
 800127c:	b21a      	sxth	r2, r3
 800127e:	4bbb      	ldr	r3, [pc, #748]	@ (800156c <main+0x6ec>)
 8001280:	801a      	strh	r2, [r3, #0]
		gyro_raw[1] -= gyro_cal[1];
 8001282:	4bba      	ldr	r3, [pc, #744]	@ (800156c <main+0x6ec>)
 8001284:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	4bb7      	ldr	r3, [pc, #732]	@ (8001570 <main+0x6f0>)
 8001292:	edd3 7a01 	vldr	s15, [r3, #4]
 8001296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129e:	ee17 3a90 	vmov	r3, s15
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	4bb1      	ldr	r3, [pc, #708]	@ (800156c <main+0x6ec>)
 80012a6:	805a      	strh	r2, [r3, #2]
		gyro_raw[2] -= gyro_cal[2];
 80012a8:	4bb0      	ldr	r3, [pc, #704]	@ (800156c <main+0x6ec>)
 80012aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b6:	4bae      	ldr	r3, [pc, #696]	@ (8001570 <main+0x6f0>)
 80012b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c4:	ee17 3a90 	vmov	r3, s15
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	4ba8      	ldr	r3, [pc, #672]	@ (800156c <main+0x6ec>)
 80012cc:	809a      	strh	r2, [r3, #4]

		angle_pitch_gyro += gyro_raw[0] * 0.0000611 ;
 80012ce:	4ba9      	ldr	r3, [pc, #676]	@ (8001574 <main+0x6f4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f8dc 	bl	8000490 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	4ba3      	ldr	r3, [pc, #652]	@ (800156c <main+0x6ec>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f8c2 	bl	800046c <__aeabi_i2d>
 80012e8:	a397      	add	r3, pc, #604	@ (adr r3, 8001548 <main+0x6c8>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f927 	bl	8000540 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4620      	mov	r0, r4
 80012f8:	4629      	mov	r1, r5
 80012fa:	f7fe ff6b 	bl	80001d4 <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fbf3 	bl	8000af0 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	4a99      	ldr	r2, [pc, #612]	@ (8001574 <main+0x6f4>)
 800130e:	6013      	str	r3, [r2, #0]
		angle_roll_gyro += gyro_raw[1]  * 0.0000611 ;
 8001310:	4b99      	ldr	r3, [pc, #612]	@ (8001578 <main+0x6f8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8bb 	bl	8000490 <__aeabi_f2d>
 800131a:	4604      	mov	r4, r0
 800131c:	460d      	mov	r5, r1
 800131e:	4b93      	ldr	r3, [pc, #588]	@ (800156c <main+0x6ec>)
 8001320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8a1 	bl	800046c <__aeabi_i2d>
 800132a:	a387      	add	r3, pc, #540	@ (adr r3, 8001548 <main+0x6c8>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f906 	bl	8000540 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ff4a 	bl	80001d4 <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbd2 	bl	8000af0 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a8a      	ldr	r2, [pc, #552]	@ (8001578 <main+0x6f8>)
 8001350:	6013      	str	r3, [r2, #0]

		angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2]*0.000001066);
 8001352:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <main+0x6f4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f89a 	bl	8000490 <__aeabi_f2d>
 800135c:	4604      	mov	r4, r0
 800135e:	460d      	mov	r5, r1
 8001360:	4b85      	ldr	r3, [pc, #532]	@ (8001578 <main+0x6f8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f893 	bl	8000490 <__aeabi_f2d>
 800136a:	4680      	mov	r8, r0
 800136c:	4689      	mov	r9, r1
 800136e:	4b7f      	ldr	r3, [pc, #508]	@ (800156c <main+0x6ec>)
 8001370:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f879 	bl	800046c <__aeabi_i2d>
 800137a:	a375      	add	r3, pc, #468	@ (adr r3, 8001550 <main+0x6d0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f8de 	bl	8000540 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	ec43 2b17 	vmov	d7, r2, r3
 800138c:	eeb0 0a47 	vmov.f32	s0, s14
 8001390:	eef0 0a67 	vmov.f32	s1, s15
 8001394:	f003 f8a0 	bl	80044d8 <sin>
 8001398:	ec53 2b10 	vmov	r2, r3, d0
 800139c:	4640      	mov	r0, r8
 800139e:	4649      	mov	r1, r9
 80013a0:	f7ff f8ce 	bl	8000540 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7fe ff12 	bl	80001d4 <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb9a 	bl	8000af0 <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a6d      	ldr	r2, [pc, #436]	@ (8001574 <main+0x6f4>)
 80013c0:	6013      	str	r3, [r2, #0]
		angle_roll_gyro += angle_pitch_gyro * sin(gyro_raw[2]*0.000001066);
 80013c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001578 <main+0x6f8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f862 	bl	8000490 <__aeabi_f2d>
 80013cc:	4604      	mov	r4, r0
 80013ce:	460d      	mov	r5, r1
 80013d0:	4b68      	ldr	r3, [pc, #416]	@ (8001574 <main+0x6f4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f85b 	bl	8000490 <__aeabi_f2d>
 80013da:	4680      	mov	r8, r0
 80013dc:	4689      	mov	r9, r1
 80013de:	4b63      	ldr	r3, [pc, #396]	@ (800156c <main+0x6ec>)
 80013e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f841 	bl	800046c <__aeabi_i2d>
 80013ea:	a359      	add	r3, pc, #356	@ (adr r3, 8001550 <main+0x6d0>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f8a6 	bl	8000540 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	ec43 2b17 	vmov	d7, r2, r3
 80013fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001400:	eef0 0a67 	vmov.f32	s1, s15
 8001404:	f003 f868 	bl	80044d8 <sin>
 8001408:	ec53 2b10 	vmov	r2, r3, d0
 800140c:	4640      	mov	r0, r8
 800140e:	4649      	mov	r1, r9
 8001410:	f7ff f896 	bl	8000540 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4620      	mov	r0, r4
 800141a:	4629      	mov	r1, r5
 800141c:	f7fe feda 	bl	80001d4 <__adddf3>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fb62 	bl	8000af0 <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	4a52      	ldr	r2, [pc, #328]	@ (8001578 <main+0x6f8>)
 8001430:	6013      	str	r3, [r2, #0]

		acc_total_vector = sqrt((acc_raw[0]*acc_raw[0])+(acc_raw[1]*acc_raw[1])+(acc_raw[2]*acc_raw[2]));
 8001432:	4b52      	ldr	r3, [pc, #328]	@ (800157c <main+0x6fc>)
 8001434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001438:	461a      	mov	r2, r3
 800143a:	4b50      	ldr	r3, [pc, #320]	@ (800157c <main+0x6fc>)
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	fb03 f202 	mul.w	r2, r3, r2
 8001444:	4b4d      	ldr	r3, [pc, #308]	@ (800157c <main+0x6fc>)
 8001446:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800144a:	4619      	mov	r1, r3
 800144c:	4b4b      	ldr	r3, [pc, #300]	@ (800157c <main+0x6fc>)
 800144e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001452:	fb01 f303 	mul.w	r3, r1, r3
 8001456:	441a      	add	r2, r3
 8001458:	4b48      	ldr	r3, [pc, #288]	@ (800157c <main+0x6fc>)
 800145a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800145e:	4619      	mov	r1, r3
 8001460:	4b46      	ldr	r3, [pc, #280]	@ (800157c <main+0x6fc>)
 8001462:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001466:	fb01 f303 	mul.w	r3, r1, r3
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe fffd 	bl	800046c <__aeabi_i2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	ec43 2b10 	vmov	d0, r2, r3
 800147a:	f002 fff9 	bl	8004470 <sqrt>
 800147e:	ec53 2b10 	vmov	r2, r3, d0
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb0b 	bl	8000aa0 <__aeabi_d2iz>
 800148a:	4603      	mov	r3, r0
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b3c      	ldr	r3, [pc, #240]	@ (8001580 <main+0x700>)
 8001490:	801a      	strh	r2, [r3, #0]

		angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector)* 57.296;
 8001492:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <main+0x6fc>)
 8001494:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a0:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <main+0x700>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014b2:	ee16 0a90 	vmov	r0, s13
 80014b6:	f7fe ffeb 	bl	8000490 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	ec43 2b10 	vmov	d0, r2, r3
 80014c2:	f002 ffa1 	bl	8004408 <asin>
 80014c6:	ec51 0b10 	vmov	r0, r1, d0
 80014ca:	a323      	add	r3, pc, #140	@ (adr r3, 8001558 <main+0x6d8>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f836 	bl	8000540 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fb08 	bl	8000af0 <__aeabi_d2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a28      	ldr	r2, [pc, #160]	@ (8001584 <main+0x704>)
 80014e4:	6013      	str	r3, [r2, #0]
		angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector)* -57.296;
 80014e6:	4b25      	ldr	r3, [pc, #148]	@ (800157c <main+0x6fc>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f4:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <main+0x700>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001506:	ee16 0a90 	vmov	r0, s13
 800150a:	f7fe ffc1 	bl	8000490 <__aeabi_f2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	ec43 2b10 	vmov	d0, r2, r3
 8001516:	f002 ff77 	bl	8004408 <asin>
 800151a:	ec51 0b10 	vmov	r0, r1, d0
 800151e:	a310      	add	r3, pc, #64	@ (adr r3, 8001560 <main+0x6e0>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7ff f80c 	bl	8000540 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff fade 	bl	8000af0 <__aeabi_d2f>
 8001534:	4603      	mov	r3, r0
 8001536:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <main+0x708>)
 8001538:	6013      	str	r3, [r2, #0]

		angle_pitch_acc -= 0.00;
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <main+0x704>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <main+0x704>)
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e023      	b.n	800158c <main+0x70c>
 8001544:	f3af 8000 	nop.w
 8001548:	01d41596 	.word	0x01d41596
 800154c:	3f10045a 	.word	0x3f10045a
 8001550:	652c6e62 	.word	0x652c6e62
 8001554:	3eb1e26f 	.word	0x3eb1e26f
 8001558:	53f7ced9 	.word	0x53f7ced9
 800155c:	404ca5e3 	.word	0x404ca5e3
 8001560:	53f7ced9 	.word	0x53f7ced9
 8001564:	c04ca5e3 	.word	0xc04ca5e3
 8001568:	20000130 	.word	0x20000130
 800156c:	20000138 	.word	0x20000138
 8001570:	20000148 	.word	0x20000148
 8001574:	20000158 	.word	0x20000158
 8001578:	2000015c 	.word	0x2000015c
 800157c:	20000140 	.word	0x20000140
 8001580:	20000154 	.word	0x20000154
 8001584:	20000160 	.word	0x20000160
 8001588:	20000164 	.word	0x20000164
		angle_roll_acc  -= 0.00;
 800158c:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <main+0x820>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a43      	ldr	r2, [pc, #268]	@ (80016a0 <main+0x820>)
 8001592:	6013      	str	r3, [r2, #0]

		if(set_gyro)
 8001594:	4b43      	ldr	r3, [pc, #268]	@ (80016a4 <main+0x824>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d04e      	beq.n	800163a <main+0x7ba>
		{
			angle_pitch = angle_pitch_gyro*0.9996 + angle_pitch_acc * 0.0004;
 800159c:	4b42      	ldr	r3, [pc, #264]	@ (80016a8 <main+0x828>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff75 	bl	8000490 <__aeabi_f2d>
 80015a6:	a33a      	add	r3, pc, #232	@ (adr r3, 8001690 <main+0x810>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe ffc8 	bl	8000540 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4614      	mov	r4, r2
 80015b6:	461d      	mov	r5, r3
 80015b8:	4b3c      	ldr	r3, [pc, #240]	@ (80016ac <main+0x82c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff67 	bl	8000490 <__aeabi_f2d>
 80015c2:	a335      	add	r3, pc, #212	@ (adr r3, 8001698 <main+0x818>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7fe ffba 	bl	8000540 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4620      	mov	r0, r4
 80015d2:	4629      	mov	r1, r5
 80015d4:	f7fe fdfe 	bl	80001d4 <__adddf3>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fa86 	bl	8000af0 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a32      	ldr	r2, [pc, #200]	@ (80016b0 <main+0x830>)
 80015e8:	6013      	str	r3, [r2, #0]
			angle_roll = angle_roll_gyro*0.9996 + angle_roll_acc * 0.0004;
 80015ea:	4b32      	ldr	r3, [pc, #200]	@ (80016b4 <main+0x834>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff4e 	bl	8000490 <__aeabi_f2d>
 80015f4:	a326      	add	r3, pc, #152	@ (adr r3, 8001690 <main+0x810>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe ffa1 	bl	8000540 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4614      	mov	r4, r2
 8001604:	461d      	mov	r5, r3
 8001606:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <main+0x820>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff40 	bl	8000490 <__aeabi_f2d>
 8001610:	a321      	add	r3, pc, #132	@ (adr r3, 8001698 <main+0x818>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe ff93 	bl	8000540 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4620      	mov	r0, r4
 8001620:	4629      	mov	r1, r5
 8001622:	f7fe fdd7 	bl	80001d4 <__adddf3>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fa5f 	bl	8000af0 <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	4a20      	ldr	r2, [pc, #128]	@ (80016b8 <main+0x838>)
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e006      	b.n	8001648 <main+0x7c8>
		}
		else
		{
			angle_pitch = angle_pitch_acc;
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <main+0x82c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <main+0x830>)
 8001640:	6013      	str	r3, [r2, #0]
			set_gyro = true;
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <main+0x824>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
		}

		while((HAL_GetTick()- prevtime)*1000 < 4000);
 8001648:	bf00      	nop
 800164a:	f000 fadf 	bl	8001c0c <HAL_GetTick>
 800164e:	ee07 0a90 	vmov	s15, r0
 8001652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <main+0x83c>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80016c0 <main+0x840>
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80016c4 <main+0x844>
 800166c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	d4e9      	bmi.n	800164a <main+0x7ca>
		prevtime = HAL_GetTick();
 8001676:	f000 fac9 	bl	8001c0c <HAL_GetTick>
 800167a:	ee07 0a90 	vmov	s15, r0
 800167e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <main+0x83c>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
		prevtime1 = time1;
 8001688:	e4f5      	b.n	8001076 <main+0x1f6>
 800168a:	bf00      	nop
 800168c:	f3af 8000 	nop.w
 8001690:	23a29c78 	.word	0x23a29c78
 8001694:	3feffcb9 	.word	0x3feffcb9
 8001698:	eb1c432d 	.word	0xeb1c432d
 800169c:	3f3a36e2 	.word	0x3f3a36e2
 80016a0:	20000164 	.word	0x20000164
 80016a4:	20000198 	.word	0x20000198
 80016a8:	20000158 	.word	0x20000158
 80016ac:	20000160 	.word	0x20000160
 80016b0:	20000168 	.word	0x20000168
 80016b4:	2000015c 	.word	0x2000015c
 80016b8:	2000016c 	.word	0x2000016c
 80016bc:	2000017c 	.word	0x2000017c
 80016c0:	447a0000 	.word	0x447a0000
 80016c4:	457a0000 	.word	0x457a0000

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	@ 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2230      	movs	r2, #48	@ 0x30
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fe64 	bl	80043a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <SystemClock_Config+0xcc>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	4a27      	ldr	r2, [pc, #156]	@ (8001794 <SystemClock_Config+0xcc>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <SystemClock_Config+0xcc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <SystemClock_Config+0xd0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a21      	ldr	r2, [pc, #132]	@ (8001798 <SystemClock_Config+0xd0>)
 8001712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <SystemClock_Config+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001728:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001738:	2304      	movs	r3, #4
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800173c:	2348      	movs	r3, #72	@ 0x48
 800173e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001740:	2302      	movs	r3, #2
 8001742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001744:	2307      	movs	r3, #7
 8001746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fecd 	bl	80034ec <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001758:	f000 f8c8 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	2302      	movs	r3, #2
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001768:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2101      	movs	r1, #1
 800177a:	4618      	mov	r0, r3
 800177c:	f002 f92e 	bl	80039dc <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001786:	f000 f8b1 	bl	80018ec <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3750      	adds	r7, #80	@ 0x50
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40007000 	.word	0x40007000

0800179c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <MX_I2C1_Init+0x54>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017a8:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <MX_I2C1_Init+0x58>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017da:	f000 fcfd 	bl	80021d8 <HAL_I2C_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017e4:	f000 f882 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000008c 	.word	0x2000008c
 80017f0:	40005400 	.word	0x40005400
 80017f4:	00061a80 	.word	0x00061a80

080017f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <MX_USART1_UART_Init+0x50>)
 8001800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_USART1_UART_Init+0x4c>)
 8001830:	f002 faf4 	bl	8003e1c <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800183a:	f000 f857 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200000e0 	.word	0x200000e0
 8001848:	40011000 	.word	0x40011000

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <MX_GPIO_Init+0x98>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a1e      	ldr	r2, [pc, #120]	@ (80018e4 <MX_GPIO_Init+0x98>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_GPIO_Init+0x98>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_GPIO_Init+0x98>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <MX_GPIO_Init+0x98>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_GPIO_Init+0x98>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <MX_GPIO_Init+0x98>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a10      	ldr	r2, [pc, #64]	@ (80018e4 <MX_GPIO_Init+0x98>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <MX_GPIO_Init+0x98>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2120      	movs	r1, #32
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <MX_GPIO_Init+0x9c>)
 80018bc:	f000 fc58 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018c0:	2320      	movs	r3, #32
 80018c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4619      	mov	r1, r3
 80018d6:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <MX_GPIO_Init+0x9c>)
 80018d8:	f000 faae 	bl	8001e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <Error_Handler+0x8>

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	4a0f      	ldr	r2, [pc, #60]	@ (8001944 <HAL_MspInit+0x4c>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800190c:	6453      	str	r3, [r2, #68]	@ 0x44
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <HAL_MspInit+0x4c>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	@ 0x40
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001936:	2007      	movs	r0, #7
 8001938:	f000 fa4a 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800

08001948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	@ (80019cc <HAL_I2C_MspInit+0x84>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12b      	bne.n	80019c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <HAL_I2C_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <HAL_I2C_MspInit+0x88>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <HAL_I2C_MspInit+0x88>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001986:	23c0      	movs	r3, #192	@ 0xc0
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198a:	2312      	movs	r3, #18
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001996:	2304      	movs	r3, #4
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <HAL_I2C_MspInit+0x8c>)
 80019a2:	f000 fa49 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_I2C_MspInit+0x88>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4a08      	ldr	r2, [pc, #32]	@ (80019d0 <HAL_I2C_MspInit+0x88>)
 80019b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_I2C_MspInit+0x88>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	@ 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40005400 	.word	0x40005400
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020400 	.word	0x40020400

080019d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	@ (8001a5c <HAL_UART_MspInit+0x84>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d12c      	bne.n	8001a54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_UART_MspInit+0x88>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a02:	4a17      	ldr	r2, [pc, #92]	@ (8001a60 <HAL_UART_MspInit+0x88>)
 8001a04:	f043 0310 	orr.w	r3, r3, #16
 8001a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_UART_MspInit+0x88>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_UART_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	@ (8001a60 <HAL_UART_MspInit+0x88>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_UART_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a44:	2307      	movs	r3, #7
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <HAL_UART_MspInit+0x8c>)
 8001a50:	f000 f9f2 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	@ 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <NMI_Handler+0x4>

08001a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <MemManage_Handler+0x4>

08001a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abe:	f000 f891 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001af0:	f7ff ffea 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f002 fc51 	bl	80043c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff f9af 	bl	8000e80 <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b30:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 8001b34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b38:	200002d8 	.word	0x200002d8

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f931 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fec0 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f93b 	bl	8001e1e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f911 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	@ (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	2000019c 	.word	0x2000019c

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	2000019c 	.word	0x2000019c

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	@ (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	@ 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff47 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff5c 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffb0 	bl	8001d8c <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e16b      	b.n	800212c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 815a 	bne.w	8002126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80b4 	beq.w	8002126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b60      	ldr	r3, [pc, #384]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b5d      	ldr	r3, [pc, #372]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a5b      	ldr	r2, [pc, #364]	@ (8002148 <HAL_GPIO_Init+0x310>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	@ (800214c <HAL_GPIO_Init+0x314>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a51      	ldr	r2, [pc, #324]	@ (8002150 <HAL_GPIO_Init+0x318>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a50      	ldr	r2, [pc, #320]	@ (8002154 <HAL_GPIO_Init+0x31c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4f      	ldr	r2, [pc, #316]	@ (8002158 <HAL_GPIO_Init+0x320>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4e      	ldr	r2, [pc, #312]	@ (800215c <HAL_GPIO_Init+0x324>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4d      	ldr	r2, [pc, #308]	@ (8002160 <HAL_GPIO_Init+0x328>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x212>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4c      	ldr	r2, [pc, #304]	@ (8002164 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4b      	ldr	r2, [pc, #300]	@ (8002168 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x20a>
 800203e:	2307      	movs	r3, #7
 8002040:	e00e      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002042:	2308      	movs	r3, #8
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002046:	2306      	movs	r3, #6
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x228>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x228>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	@ (8002148 <HAL_GPIO_Init+0x310>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <HAL_GPIO_Init+0x334>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a32      	ldr	r2, [pc, #200]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b30      	ldr	r3, [pc, #192]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a27      	ldr	r2, [pc, #156]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_GPIO_Init+0x334>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a12      	ldr	r2, [pc, #72]	@ (800216c <HAL_GPIO_Init+0x334>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae90 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800
 8002168:	40021c00 	.word	0x40021c00
 800216c:	40013c00 	.word	0x40013c00

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	041a      	lsls	r2, r3, #16
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43d9      	mvns	r1, r3
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	400b      	ands	r3, r1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e12b      	b.n	8002442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fba2 	bl	8001948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	@ 0x24
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800222a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800223a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800223c:	f001 fdc6 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8002240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a81      	ldr	r2, [pc, #516]	@ (800244c <HAL_I2C_Init+0x274>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d807      	bhi.n	800225c <HAL_I2C_Init+0x84>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a80      	ldr	r2, [pc, #512]	@ (8002450 <HAL_I2C_Init+0x278>)
 8002250:	4293      	cmp	r3, r2
 8002252:	bf94      	ite	ls
 8002254:	2301      	movls	r3, #1
 8002256:	2300      	movhi	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e006      	b.n	800226a <HAL_I2C_Init+0x92>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a7d      	ldr	r2, [pc, #500]	@ (8002454 <HAL_I2C_Init+0x27c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0e7      	b.n	8002442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4a78      	ldr	r2, [pc, #480]	@ (8002458 <HAL_I2C_Init+0x280>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0c9b      	lsrs	r3, r3, #18
 800227c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a6a      	ldr	r2, [pc, #424]	@ (800244c <HAL_I2C_Init+0x274>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d802      	bhi.n	80022ac <HAL_I2C_Init+0xd4>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3301      	adds	r3, #1
 80022aa:	e009      	b.n	80022c0 <HAL_I2C_Init+0xe8>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	4a69      	ldr	r2, [pc, #420]	@ (800245c <HAL_I2C_Init+0x284>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	099b      	lsrs	r3, r3, #6
 80022be:	3301      	adds	r3, #1
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	495c      	ldr	r1, [pc, #368]	@ (800244c <HAL_I2C_Init+0x274>)
 80022dc:	428b      	cmp	r3, r1
 80022de:	d819      	bhi.n	8002314 <HAL_I2C_Init+0x13c>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1e59      	subs	r1, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ee:	1c59      	adds	r1, r3, #1
 80022f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022f4:	400b      	ands	r3, r1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_I2C_Init+0x138>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1e59      	subs	r1, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fbb1 f3f3 	udiv	r3, r1, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230e:	e051      	b.n	80023b4 <HAL_I2C_Init+0x1dc>
 8002310:	2304      	movs	r3, #4
 8002312:	e04f      	b.n	80023b4 <HAL_I2C_Init+0x1dc>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <HAL_I2C_Init+0x168>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e012      	b.n	8002366 <HAL_I2C_Init+0x18e>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	0099      	lsls	r1, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Init+0x196>
 800236a:	2301      	movs	r3, #1
 800236c:	e022      	b.n	80023b4 <HAL_I2C_Init+0x1dc>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10e      	bne.n	8002394 <HAL_I2C_Init+0x1bc>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1e58      	subs	r0, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	440b      	add	r3, r1
 8002384:	fbb0 f3f3 	udiv	r3, r0, r3
 8002388:	3301      	adds	r3, #1
 800238a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002392:	e00f      	b.n	80023b4 <HAL_I2C_Init+0x1dc>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e58      	subs	r0, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	0099      	lsls	r1, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	6809      	ldr	r1, [r1, #0]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6911      	ldr	r1, [r2, #16]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68d2      	ldr	r2, [r2, #12]
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	000186a0 	.word	0x000186a0
 8002450:	001e847f 	.word	0x001e847f
 8002454:	003d08ff 	.word	0x003d08ff
 8002458:	431bde83 	.word	0x431bde83
 800245c:	10624dd3 	.word	0x10624dd3

08002460 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	461a      	mov	r2, r3
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
 8002470:	4613      	mov	r3, r2
 8002472:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff fbca 	bl	8001c0c <HAL_GetTick>
 8002478:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	f040 80e0 	bne.w	8002648 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2319      	movs	r3, #25
 800248e:	2201      	movs	r2, #1
 8002490:	4970      	ldr	r1, [pc, #448]	@ (8002654 <HAL_I2C_Master_Transmit+0x1f4>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fdf4 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	e0d3      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2C_Master_Transmit+0x50>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0cc      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d007      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2221      	movs	r2, #33	@ 0x21
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2210      	movs	r2, #16
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	893a      	ldrh	r2, [r7, #8]
 8002506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a50      	ldr	r2, [pc, #320]	@ (8002658 <HAL_I2C_Master_Transmit+0x1f8>)
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fbc8 	bl	8002cb4 <I2C_MasterRequestWrite>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e08d      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002544:	e066      	b.n	8002614 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	6a39      	ldr	r1, [r7, #32]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 feb2 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	2b04      	cmp	r3, #4
 800255c:	d107      	bne.n	800256e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d11b      	bne.n	80025e8 <HAL_I2C_Master_Transmit+0x188>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d017      	beq.n	80025e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	6a39      	ldr	r1, [r7, #32]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fea9 	bl	8003344 <I2C_WaitOnBTFFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00d      	beq.n	8002614 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d107      	bne.n	8002610 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e01a      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d194      	bne.n	8002546 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	00100002 	.word	0x00100002
 8002658:	ffff0000 	.word	0xffff0000

0800265c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	@ 0x30
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	460b      	mov	r3, r1
 800266a:	817b      	strh	r3, [r7, #10]
 800266c:	4613      	mov	r3, r2
 800266e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff facc 	bl	8001c0c <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b20      	cmp	r3, #32
 8002680:	f040 8217 	bne.w	8002ab2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2319      	movs	r3, #25
 800268a:	2201      	movs	r2, #1
 800268c:	497c      	ldr	r1, [pc, #496]	@ (8002880 <HAL_I2C_Master_Receive+0x224>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fcf6 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
 800269c:	e20a      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_I2C_Master_Receive+0x50>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e203      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d007      	beq.n	80026d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2222      	movs	r2, #34	@ 0x22
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2210      	movs	r2, #16
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	893a      	ldrh	r2, [r7, #8]
 8002702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a5c      	ldr	r2, [pc, #368]	@ (8002884 <HAL_I2C_Master_Receive+0x228>)
 8002712:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002714:	8979      	ldrh	r1, [r7, #10]
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fb4c 	bl	8002db8 <I2C_MasterRequestRead>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1c4      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	d113      	bne.n	800275a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	623b      	str	r3, [r7, #32]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	623b      	str	r3, [r7, #32]
 8002746:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e198      	b.n	8002a8c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275e:	2b01      	cmp	r3, #1
 8002760:	d11b      	bne.n	800279a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e178      	b.n	8002a8c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d11b      	bne.n	80027da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	e158      	b.n	8002a8c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002800:	e144      	b.n	8002a8c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002806:	2b03      	cmp	r3, #3
 8002808:	f200 80f1 	bhi.w	80029ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002810:	2b01      	cmp	r3, #1
 8002812:	d123      	bne.n	800285c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002816:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fddb 	bl	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e145      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800285a:	e117      	b.n	8002a8c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002860:	2b02      	cmp	r3, #2
 8002862:	d14e      	bne.n	8002902 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286a:	2200      	movs	r2, #0
 800286c:	4906      	ldr	r1, [pc, #24]	@ (8002888 <HAL_I2C_Master_Receive+0x22c>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fc06 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e11a      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
 800287e:	bf00      	nop
 8002880:	00100002 	.word	0x00100002
 8002884:	ffff0000 	.word	0xffff0000
 8002888:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002900:	e0c4      	b.n	8002a8c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002908:	2200      	movs	r2, #0
 800290a:	496c      	ldr	r1, [pc, #432]	@ (8002abc <HAL_I2C_Master_Receive+0x460>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fbb7 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0cb      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800292a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	2200      	movs	r2, #0
 8002966:	4955      	ldr	r1, [pc, #340]	@ (8002abc <HAL_I2C_Master_Receive+0x460>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fb89 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e09d      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029ec:	e04e      	b.n	8002a8c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fcee 	bl	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e058      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d124      	bne.n	8002a8c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d107      	bne.n	8002a5a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a58:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f aeb6 	bne.w	8002802 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e000      	b.n	8002ab4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3728      	adds	r7, #40	@ 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	00010004 	.word	0x00010004

08002ac0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	813b      	strh	r3, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ada:	f7ff f897 	bl	8001c0c <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	f040 80d9 	bne.w	8002ca0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2319      	movs	r3, #25
 8002af4:	2201      	movs	r2, #1
 8002af6:	496d      	ldr	r1, [pc, #436]	@ (8002cac <HAL_I2C_Mem_Write+0x1ec>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fac1 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0cc      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_I2C_Mem_Write+0x56>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0c5      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d007      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2221      	movs	r2, #33	@ 0x21
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb0 <HAL_I2C_Mem_Write+0x1f0>)
 8002b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b7e:	88f8      	ldrh	r0, [r7, #6]
 8002b80:	893a      	ldrh	r2, [r7, #8]
 8002b82:	8979      	ldrh	r1, [r7, #10]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f9e0 	bl	8002f54 <I2C_RequestMemoryWrite>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d052      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e081      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fb86 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06b      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11b      	bne.n	8002c40 <HAL_I2C_Mem_Write+0x180>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1aa      	bne.n	8002b9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fb79 	bl	8003344 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d107      	bne.n	8002c70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e016      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	00100002 	.word	0x00100002
 8002cb0:	ffff0000 	.word	0xffff0000

08002cb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d006      	beq.n	8002cde <I2C_MasterRequestWrite+0x2a>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d003      	beq.n	8002cde <I2C_MasterRequestWrite+0x2a>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cdc:	d108      	bne.n	8002cf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e00b      	b.n	8002d08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	2b12      	cmp	r3, #18
 8002cf6:	d107      	bne.n	8002d08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f9b3 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d2e:	d103      	bne.n	8002d38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e035      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d44:	d108      	bne.n	8002d58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	e01b      	b.n	8002d90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	11db      	asrs	r3, r3, #7
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0306 	and.w	r3, r3, #6
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f063 030f 	orn	r3, r3, #15
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	490e      	ldr	r1, [pc, #56]	@ (8002db0 <I2C_MasterRequestWrite+0xfc>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f9fc 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e010      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4907      	ldr	r1, [pc, #28]	@ (8002db4 <I2C_MasterRequestWrite+0x100>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f9ec 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	00010008 	.word	0x00010008
 8002db4:	00010002 	.word	0x00010002

08002db8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d006      	beq.n	8002df2 <I2C_MasterRequestRead+0x3a>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d003      	beq.n	8002df2 <I2C_MasterRequestRead+0x3a>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002df0:	d108      	bne.n	8002e04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e00b      	b.n	8002e1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	2b11      	cmp	r3, #17
 8002e0a:	d107      	bne.n	8002e1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f929 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e42:	d103      	bne.n	8002e4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e079      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e58:	d108      	bne.n	8002e6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	611a      	str	r2, [r3, #16]
 8002e6a:	e05f      	b.n	8002f2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	11db      	asrs	r3, r3, #7
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f003 0306 	and.w	r3, r3, #6
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f063 030f 	orn	r3, r3, #15
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4930      	ldr	r1, [pc, #192]	@ (8002f4c <I2C_MasterRequestRead+0x194>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f972 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e054      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4929      	ldr	r1, [pc, #164]	@ (8002f50 <I2C_MasterRequestRead+0x198>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f962 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e044      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ede:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f8c7 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f06:	d103      	bne.n	8002f10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f0e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e017      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f14:	897b      	ldrh	r3, [r7, #10]
 8002f16:	11db      	asrs	r3, r3, #7
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0306 	and.w	r3, r3, #6
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f063 030e 	orn	r3, r3, #14
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4907      	ldr	r1, [pc, #28]	@ (8002f50 <I2C_MasterRequestRead+0x198>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f91e 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	00010008 	.word	0x00010008
 8002f50:	00010002 	.word	0x00010002

08002f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f878 	bl	8003080 <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa4:	d103      	bne.n	8002fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e05f      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	492d      	ldr	r1, [pc, #180]	@ (800307c <I2C_RequestMemoryWrite+0x128>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f8d3 	bl	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e04c      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f95e 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	2b04      	cmp	r3, #4
 8003004:	d107      	bne.n	8003016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e02b      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	e021      	b.n	8003070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f938 	bl	80032b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e005      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003066:	893b      	ldrh	r3, [r7, #8]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	00010002 	.word	0x00010002

08003080 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003090:	e048      	b.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d044      	beq.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fe fdb7 	bl	8001c0c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d139      	bne.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10d      	bne.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	e00c      	b.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	43da      	mvns	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d116      	bne.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e023      	b.n	800316c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10d      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0xca>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	43da      	mvns	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4013      	ands	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	e00c      	b.n	8003164 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	429a      	cmp	r2, r3
 8003168:	d093      	beq.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003182:	e071      	b.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003192:	d123      	bne.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	f043 0204 	orr.w	r2, r3, #4
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e067      	b.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d041      	beq.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe fd12 	bl	8001c0c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d136      	bne.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d10c      	bne.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e00b      	b.n	8003236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	43da      	mvns	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4013      	ands	r3, r2
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e021      	b.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10c      	bne.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	43da      	mvns	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e00b      	b.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f47f af6d 	bne.w	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c0:	e034      	b.n	800332c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f8e3 	bl	800348e <I2C_IsAcknowledgeFailed>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e034      	b.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d028      	beq.n	800332c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fe fc97 	bl	8001c0c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11d      	bne.n	800332c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fa:	2b80      	cmp	r3, #128	@ 0x80
 80032fc:	d016      	beq.n	800332c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e007      	b.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	2b80      	cmp	r3, #128	@ 0x80
 8003338:	d1c3      	bne.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003350:	e034      	b.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f89b 	bl	800348e <I2C_IsAcknowledgeFailed>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e034      	b.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d028      	beq.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fe fc4f 	bl	8001c0c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11d      	bne.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d016      	beq.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e007      	b.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d1c3      	bne.n	8003352 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033e0:	e049      	b.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d119      	bne.n	8003424 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0210 	mvn.w	r2, #16
 80033f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e030      	b.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7fe fbf2 	bl	8001c0c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11d      	bne.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003444:	2b40      	cmp	r3, #64	@ 0x40
 8003446:	d016      	beq.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e007      	b.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b40      	cmp	r3, #64	@ 0x40
 8003482:	d1ae      	bne.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a4:	d11b      	bne.n	80034de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	f043 0204 	orr.w	r2, r3, #4
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e267      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d075      	beq.n	80035f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350a:	4b88      	ldr	r3, [pc, #544]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b85      	ldr	r3, [pc, #532]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351e:	2b08      	cmp	r3, #8
 8003520:	d112      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b82      	ldr	r3, [pc, #520]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800352e:	d10b      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	4b7e      	ldr	r3, [pc, #504]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05b      	beq.n	80035f4 <HAL_RCC_OscConfig+0x108>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d157      	bne.n	80035f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e242      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003550:	d106      	bne.n	8003560 <HAL_RCC_OscConfig+0x74>
 8003552:	4b76      	ldr	r3, [pc, #472]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a75      	ldr	r2, [pc, #468]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e01d      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x98>
 800356a:	4b70      	ldr	r3, [pc, #448]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6f      	ldr	r2, [pc, #444]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b6d      	ldr	r3, [pc, #436]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6c      	ldr	r2, [pc, #432]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003584:	4b69      	ldr	r3, [pc, #420]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a68      	ldr	r2, [pc, #416]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b66      	ldr	r3, [pc, #408]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fb32 	bl	8001c0c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe fb2e 	bl	8001c0c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e207      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b5b      	ldr	r3, [pc, #364]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0xc0>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fb1e 	bl	8001c0c <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe fb1a 	bl	8001c0c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1f3      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	4b51      	ldr	r3, [pc, #324]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0xe8>
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003602:	4b4a      	ldr	r3, [pc, #296]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b47      	ldr	r3, [pc, #284]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003616:	2b08      	cmp	r3, #8
 8003618:	d11c      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b44      	ldr	r3, [pc, #272]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	4b41      	ldr	r3, [pc, #260]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1c7      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4937      	ldr	r1, [pc, #220]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	e03a      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365c:	4b34      	ldr	r3, [pc, #208]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe fad3 	bl	8001c0c <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366a:	f7fe facf 	bl	8001c0c <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1a8      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4925      	ldr	r1, [pc, #148]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]
 800369c:	e015      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fab2 	bl	8001c0c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ac:	f7fe faae 	bl	8001c0c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e187      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe fa92 	bl	8001c0c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fe fa8e 	bl	8001c0c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e167      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x200>
 800370a:	e01b      	b.n	8003744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe fa7b 	bl	8001c0c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	e00e      	b.n	8003738 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371a:	f7fe fa77 	bl	8001c0c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d907      	bls.n	8003738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e150      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	42470000 	.word	0x42470000
 8003734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ea      	bne.n	800371a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8097 	beq.w	8003880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b81      	ldr	r3, [pc, #516]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b7d      	ldr	r3, [pc, #500]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a7c      	ldr	r2, [pc, #496]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
 8003772:	4b7a      	ldr	r3, [pc, #488]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b77      	ldr	r3, [pc, #476]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b74      	ldr	r3, [pc, #464]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a73      	ldr	r2, [pc, #460]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe fa37 	bl	8001c0c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe fa33 	bl	8001c0c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e10c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2ea>
 80037c8:	4b64      	ldr	r3, [pc, #400]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	4a63      	ldr	r2, [pc, #396]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d4:	e01c      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x30c>
 80037de:	4b5f      	ldr	r3, [pc, #380]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	4a5e      	ldr	r2, [pc, #376]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ea:	4b5c      	ldr	r3, [pc, #368]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a5b      	ldr	r2, [pc, #364]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037f8:	4b58      	ldr	r3, [pc, #352]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a57      	ldr	r2, [pc, #348]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
 8003804:	4b55      	ldr	r3, [pc, #340]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a54      	ldr	r2, [pc, #336]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0304 	bic.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe f9f8 	bl	8001c0c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe f9f4 	bl	8001c0c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0cb      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	4b49      	ldr	r3, [pc, #292]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ee      	beq.n	8003820 <HAL_RCC_OscConfig+0x334>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003844:	f7fe f9e2 	bl	8001c0c <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe f9de 	bl	8001c0c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0b5      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ee      	bne.n	800384c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	4a38      	ldr	r2, [pc, #224]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a1 	beq.w	80039cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388a:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d05c      	beq.n	8003950 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d141      	bne.n	8003922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b31      	ldr	r3, [pc, #196]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fe f9b2 	bl	8001c0c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fe f9ae 	bl	8001c0c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e087      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	491b      	ldr	r1, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7fe f987 	bl	8001c0c <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003902:	f7fe f983 	bl	8001c0c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e05c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x416>
 8003920:	e054      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe f970 	bl	8001c0c <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe f96c 	bl	8001c0c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e045      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x444>
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e038      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000
 8003964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <HAL_RCC_OscConfig+0x4ec>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d028      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d121      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800399e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cc      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b65      	ldr	r3, [pc, #404]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a58      	ldr	r2, [pc, #352]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e067      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b37      	ldr	r3, [pc, #220]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4934      	ldr	r1, [pc, #208]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7fe f89e 	bl	8001c0c <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fe f89a 	bl	8001c0c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d20c      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd fffe 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	08005b10 	.word	0x08005b10
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	20000004 	.word	0x20000004

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b094      	sub	sp, #80	@ 0x50
 8003bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb8:	2300      	movs	r3, #0
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc0:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d00d      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	f200 80e1 	bhi.w	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x34>
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bda:	e0db      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b73      	ldr	r3, [pc, #460]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003be0:	e0db      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be2:	4b73      	ldr	r3, [pc, #460]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be6:	e0d8      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be8:	4b6f      	ldr	r3, [pc, #444]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d063      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	2200      	movs	r2, #0
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	0159      	lsls	r1, r3, #5
 8003c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2c:	0150      	lsls	r0, r2, #5
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4621      	mov	r1, r4
 8003c34:	1a51      	subs	r1, r2, r1
 8003c36:	6139      	str	r1, [r7, #16]
 8003c38:	4629      	mov	r1, r5
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	018b      	lsls	r3, r1, #6
 8003c50:	4651      	mov	r1, sl
 8003c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c56:	4651      	mov	r1, sl
 8003c58:	018a      	lsls	r2, r1, #6
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c60:	4659      	mov	r1, fp
 8003c62:	eb63 0901 	sbc.w	r9, r3, r1
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	eb18 0303 	adds.w	r3, r8, r3
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	462b      	mov	r3, r5
 8003c88:	eb49 0303 	adc.w	r3, r9, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	024b      	lsls	r3, r1, #9
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	024a      	lsls	r2, r1, #9
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb8:	f7fc ff6a 	bl	8000b90 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc4:	e058      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc6:	4b38      	ldr	r3, [pc, #224]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	099b      	lsrs	r3, r3, #6
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	f04f 0000 	mov.w	r0, #0
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	0159      	lsls	r1, r3, #5
 8003cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf2:	0150      	lsls	r0, r2, #5
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d18:	ebb2 040a 	subs.w	r4, r2, sl
 8003d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	00eb      	lsls	r3, r5, #3
 8003d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2e:	00e2      	lsls	r2, r4, #3
 8003d30:	4614      	mov	r4, r2
 8003d32:	461d      	mov	r5, r3
 8003d34:	4643      	mov	r3, r8
 8003d36:	18e3      	adds	r3, r4, r3
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	eb45 0303 	adc.w	r3, r5, r3
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	028b      	lsls	r3, r1, #10
 8003d52:	4621      	mov	r1, r4
 8003d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d58:	4621      	mov	r1, r4
 8003d5a:	028a      	lsls	r2, r1, #10
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d62:	2200      	movs	r2, #0
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	61fa      	str	r2, [r7, #28]
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	f7fc ff10 	bl	8000b90 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3750      	adds	r7, #80	@ 0x50
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000000 	.word	0x20000000

08003dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0a9b      	lsrs	r3, r3, #10
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	@ (8003df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	08005b20 	.word	0x08005b20

08003df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003df8:	f7ff ffdc 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0b5b      	lsrs	r3, r3, #13
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4903      	ldr	r1, [pc, #12]	@ (8003e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	08005b20 	.word	0x08005b20

08003e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e042      	b.n	8003eb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd fdc8 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2224      	movs	r2, #36	@ 0x24
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f82b 	bl	8003ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec0:	b0c0      	sub	sp, #256	@ 0x100
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	68d9      	ldr	r1, [r3, #12]
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	ea40 0301 	orr.w	r3, r0, r1
 8003ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f14:	f021 010c 	bic.w	r1, r1, #12
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f22:	430b      	orrs	r3, r1
 8003f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f36:	6999      	ldr	r1, [r3, #24]
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	ea40 0301 	orr.w	r3, r0, r1
 8003f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8004188 <UART_SetConfig+0x2cc>)
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d005      	beq.n	8003f5c <UART_SetConfig+0xa0>
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b8d      	ldr	r3, [pc, #564]	@ (800418c <UART_SetConfig+0x2d0>)
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d104      	bne.n	8003f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7ff ff4a 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8003f60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f64:	e003      	b.n	8003f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f66:	f7ff ff31 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8003f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f78:	f040 810c 	bne.w	8004194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	1891      	adds	r1, r2, r2
 8003f94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f96:	415b      	adcs	r3, r3
 8003f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	eb12 0801 	adds.w	r8, r2, r1
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	eb43 0901 	adc.w	r9, r3, r1
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fbe:	4690      	mov	r8, r2
 8003fc0:	4699      	mov	r9, r3
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	eb18 0303 	adds.w	r3, r8, r3
 8003fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fcc:	462b      	mov	r3, r5
 8003fce:	eb49 0303 	adc.w	r3, r9, r3
 8003fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fea:	460b      	mov	r3, r1
 8003fec:	18db      	adds	r3, r3, r3
 8003fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	eb42 0303 	adc.w	r3, r2, r3
 8003ff6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004000:	f7fc fdc6 	bl	8000b90 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4b61      	ldr	r3, [pc, #388]	@ (8004190 <UART_SetConfig+0x2d4>)
 800400a:	fba3 2302 	umull	r2, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	011c      	lsls	r4, r3, #4
 8004012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800401c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	1891      	adds	r1, r2, r2
 800402a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800402c:	415b      	adcs	r3, r3
 800402e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004034:	4641      	mov	r1, r8
 8004036:	eb12 0a01 	adds.w	sl, r2, r1
 800403a:	4649      	mov	r1, r9
 800403c:	eb43 0b01 	adc.w	fp, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800404c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004054:	4692      	mov	sl, r2
 8004056:	469b      	mov	fp, r3
 8004058:	4643      	mov	r3, r8
 800405a:	eb1a 0303 	adds.w	r3, sl, r3
 800405e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004062:	464b      	mov	r3, r9
 8004064:	eb4b 0303 	adc.w	r3, fp, r3
 8004068:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004078:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800407c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004080:	460b      	mov	r3, r1
 8004082:	18db      	adds	r3, r3, r3
 8004084:	643b      	str	r3, [r7, #64]	@ 0x40
 8004086:	4613      	mov	r3, r2
 8004088:	eb42 0303 	adc.w	r3, r2, r3
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
 800408e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004096:	f7fc fd7b 	bl	8000b90 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4611      	mov	r1, r2
 80040a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <UART_SetConfig+0x2d4>)
 80040a2:	fba3 2301 	umull	r2, r3, r3, r1
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2264      	movs	r2, #100	@ 0x64
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	1acb      	subs	r3, r1, r3
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040b6:	4b36      	ldr	r3, [pc, #216]	@ (8004190 <UART_SetConfig+0x2d4>)
 80040b8:	fba3 2302 	umull	r2, r3, r3, r2
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040c4:	441c      	add	r4, r3
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040e0:	415b      	adcs	r3, r3
 80040e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040e8:	4641      	mov	r1, r8
 80040ea:	1851      	adds	r1, r2, r1
 80040ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80040ee:	4649      	mov	r1, r9
 80040f0:	414b      	adcs	r3, r1
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004100:	4659      	mov	r1, fp
 8004102:	00cb      	lsls	r3, r1, #3
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410a:	4651      	mov	r1, sl
 800410c:	00ca      	lsls	r2, r1, #3
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	4603      	mov	r3, r0
 8004114:	4642      	mov	r2, r8
 8004116:	189b      	adds	r3, r3, r2
 8004118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800411c:	464b      	mov	r3, r9
 800411e:	460a      	mov	r2, r1
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004134:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800413c:	460b      	mov	r3, r1
 800413e:	18db      	adds	r3, r3, r3
 8004140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004142:	4613      	mov	r3, r2
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800414a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800414e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004152:	f7fc fd1d 	bl	8000b90 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <UART_SetConfig+0x2d4>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	@ 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	3332      	adds	r3, #50	@ 0x32
 800416e:	4a08      	ldr	r2, [pc, #32]	@ (8004190 <UART_SetConfig+0x2d4>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 0207 	and.w	r2, r3, #7
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4422      	add	r2, r4
 8004182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004184:	e106      	b.n	8004394 <UART_SetConfig+0x4d8>
 8004186:	bf00      	nop
 8004188:	40011000 	.word	0x40011000
 800418c:	40011400 	.word	0x40011400
 8004190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004198:	2200      	movs	r2, #0
 800419a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800419e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041a6:	4642      	mov	r2, r8
 80041a8:	464b      	mov	r3, r9
 80041aa:	1891      	adds	r1, r2, r2
 80041ac:	6239      	str	r1, [r7, #32]
 80041ae:	415b      	adcs	r3, r3
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041b6:	4641      	mov	r1, r8
 80041b8:	1854      	adds	r4, r2, r1
 80041ba:	4649      	mov	r1, r9
 80041bc:	eb43 0501 	adc.w	r5, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	00eb      	lsls	r3, r5, #3
 80041ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ce:	00e2      	lsls	r2, r4, #3
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	18e3      	adds	r3, r4, r3
 80041d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041dc:	464b      	mov	r3, r9
 80041de:	eb45 0303 	adc.w	r3, r5, r3
 80041e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004202:	4629      	mov	r1, r5
 8004204:	008b      	lsls	r3, r1, #2
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420c:	4621      	mov	r1, r4
 800420e:	008a      	lsls	r2, r1, #2
 8004210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004214:	f7fc fcbc 	bl	8000b90 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4b60      	ldr	r3, [pc, #384]	@ (80043a0 <UART_SetConfig+0x4e4>)
 800421e:	fba3 2302 	umull	r2, r3, r3, r2
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	011c      	lsls	r4, r3, #4
 8004226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004230:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	1891      	adds	r1, r2, r2
 800423e:	61b9      	str	r1, [r7, #24]
 8004240:	415b      	adcs	r3, r3
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004248:	4641      	mov	r1, r8
 800424a:	1851      	adds	r1, r2, r1
 800424c:	6139      	str	r1, [r7, #16]
 800424e:	4649      	mov	r1, r9
 8004250:	414b      	adcs	r3, r1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004260:	4659      	mov	r1, fp
 8004262:	00cb      	lsls	r3, r1, #3
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426a:	4651      	mov	r1, sl
 800426c:	00ca      	lsls	r2, r1, #3
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	4603      	mov	r3, r0
 8004274:	4642      	mov	r2, r8
 8004276:	189b      	adds	r3, r3, r2
 8004278:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800427c:	464b      	mov	r3, r9
 800427e:	460a      	mov	r2, r1
 8004280:	eb42 0303 	adc.w	r3, r2, r3
 8004284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004292:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042a0:	4649      	mov	r1, r9
 80042a2:	008b      	lsls	r3, r1, #2
 80042a4:	4641      	mov	r1, r8
 80042a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042aa:	4641      	mov	r1, r8
 80042ac:	008a      	lsls	r2, r1, #2
 80042ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042b2:	f7fc fc6d 	bl	8000b90 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	4b38      	ldr	r3, [pc, #224]	@ (80043a0 <UART_SetConfig+0x4e4>)
 80042be:	fba3 2301 	umull	r2, r3, r3, r1
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2264      	movs	r2, #100	@ 0x64
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	1acb      	subs	r3, r1, r3
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3332      	adds	r3, #50	@ 0x32
 80042d0:	4a33      	ldr	r2, [pc, #204]	@ (80043a0 <UART_SetConfig+0x4e4>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042dc:	441c      	add	r4, r3
 80042de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e2:	2200      	movs	r2, #0
 80042e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80042e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80042e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	1891      	adds	r1, r2, r2
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	415b      	adcs	r3, r3
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042fc:	4641      	mov	r1, r8
 80042fe:	1851      	adds	r1, r2, r1
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	4649      	mov	r1, r9
 8004304:	414b      	adcs	r3, r1
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004314:	4659      	mov	r1, fp
 8004316:	00cb      	lsls	r3, r1, #3
 8004318:	4651      	mov	r1, sl
 800431a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800431e:	4651      	mov	r1, sl
 8004320:	00ca      	lsls	r2, r1, #3
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	4603      	mov	r3, r0
 8004328:	4642      	mov	r2, r8
 800432a:	189b      	adds	r3, r3, r2
 800432c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800432e:	464b      	mov	r3, r9
 8004330:	460a      	mov	r2, r1
 8004332:	eb42 0303 	adc.w	r3, r2, r3
 8004336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	663b      	str	r3, [r7, #96]	@ 0x60
 8004342:	667a      	str	r2, [r7, #100]	@ 0x64
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004350:	4649      	mov	r1, r9
 8004352:	008b      	lsls	r3, r1, #2
 8004354:	4641      	mov	r1, r8
 8004356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435a:	4641      	mov	r1, r8
 800435c:	008a      	lsls	r2, r1, #2
 800435e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004362:	f7fc fc15 	bl	8000b90 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <UART_SetConfig+0x4e4>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	@ 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	3332      	adds	r3, #50	@ 0x32
 800437e:	4a08      	ldr	r2, [pc, #32]	@ (80043a0 <UART_SetConfig+0x4e4>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 020f 	and.w	r2, r3, #15
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4422      	add	r2, r4
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800439a:	46bd      	mov	sp, r7
 800439c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a0:	51eb851f 	.word	0x51eb851f

080043a4 <memset>:
 80043a4:	4402      	add	r2, r0
 80043a6:	4603      	mov	r3, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <__errno>:
 80043b4:	4b01      	ldr	r3, [pc, #4]	@ (80043bc <__errno+0x8>)
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000000c 	.word	0x2000000c

080043c0 <__libc_init_array>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	4d0d      	ldr	r5, [pc, #52]	@ (80043f8 <__libc_init_array+0x38>)
 80043c4:	4c0d      	ldr	r4, [pc, #52]	@ (80043fc <__libc_init_array+0x3c>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	2600      	movs	r6, #0
 80043cc:	42a6      	cmp	r6, r4
 80043ce:	d109      	bne.n	80043e4 <__libc_init_array+0x24>
 80043d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004400 <__libc_init_array+0x40>)
 80043d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004404 <__libc_init_array+0x44>)
 80043d4:	f001 fb90 	bl	8005af8 <_init>
 80043d8:	1b64      	subs	r4, r4, r5
 80043da:	10a4      	asrs	r4, r4, #2
 80043dc:	2600      	movs	r6, #0
 80043de:	42a6      	cmp	r6, r4
 80043e0:	d105      	bne.n	80043ee <__libc_init_array+0x2e>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e8:	4798      	blx	r3
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7ee      	b.n	80043cc <__libc_init_array+0xc>
 80043ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f2:	4798      	blx	r3
 80043f4:	3601      	adds	r6, #1
 80043f6:	e7f2      	b.n	80043de <__libc_init_array+0x1e>
 80043f8:	08005d10 	.word	0x08005d10
 80043fc:	08005d10 	.word	0x08005d10
 8004400:	08005d10 	.word	0x08005d10
 8004404:	08005d14 	.word	0x08005d14

08004408 <asin>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	ed2d 8b02 	vpush	{d8}
 800440e:	ec55 4b10 	vmov	r4, r5, d0
 8004412:	f000 fb1d 	bl	8004a50 <__ieee754_asin>
 8004416:	4622      	mov	r2, r4
 8004418:	462b      	mov	r3, r5
 800441a:	4620      	mov	r0, r4
 800441c:	4629      	mov	r1, r5
 800441e:	eeb0 8a40 	vmov.f32	s16, s0
 8004422:	eef0 8a60 	vmov.f32	s17, s1
 8004426:	f7fc fb25 	bl	8000a74 <__aeabi_dcmpun>
 800442a:	b9a8      	cbnz	r0, 8004458 <asin+0x50>
 800442c:	ec45 4b10 	vmov	d0, r4, r5
 8004430:	f000 f84a 	bl	80044c8 <fabs>
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <asin+0x60>)
 8004436:	ec51 0b10 	vmov	r0, r1, d0
 800443a:	2200      	movs	r2, #0
 800443c:	f7fc fb10 	bl	8000a60 <__aeabi_dcmpgt>
 8004440:	b150      	cbz	r0, 8004458 <asin+0x50>
 8004442:	f7ff ffb7 	bl	80043b4 <__errno>
 8004446:	ecbd 8b02 	vpop	{d8}
 800444a:	2321      	movs	r3, #33	@ 0x21
 800444c:	6003      	str	r3, [r0, #0]
 800444e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004452:	4806      	ldr	r0, [pc, #24]	@ (800446c <asin+0x64>)
 8004454:	f000 b894 	b.w	8004580 <nan>
 8004458:	eeb0 0a48 	vmov.f32	s0, s16
 800445c:	eef0 0a68 	vmov.f32	s1, s17
 8004460:	ecbd 8b02 	vpop	{d8}
 8004464:	bd38      	pop	{r3, r4, r5, pc}
 8004466:	bf00      	nop
 8004468:	3ff00000 	.word	0x3ff00000
 800446c:	08005b28 	.word	0x08005b28

08004470 <sqrt>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	ed2d 8b02 	vpush	{d8}
 8004476:	ec55 4b10 	vmov	r4, r5, d0
 800447a:	f000 f889 	bl	8004590 <__ieee754_sqrt>
 800447e:	4622      	mov	r2, r4
 8004480:	462b      	mov	r3, r5
 8004482:	4620      	mov	r0, r4
 8004484:	4629      	mov	r1, r5
 8004486:	eeb0 8a40 	vmov.f32	s16, s0
 800448a:	eef0 8a60 	vmov.f32	s17, s1
 800448e:	f7fc faf1 	bl	8000a74 <__aeabi_dcmpun>
 8004492:	b990      	cbnz	r0, 80044ba <sqrt+0x4a>
 8004494:	2200      	movs	r2, #0
 8004496:	2300      	movs	r3, #0
 8004498:	4620      	mov	r0, r4
 800449a:	4629      	mov	r1, r5
 800449c:	f7fc fac2 	bl	8000a24 <__aeabi_dcmplt>
 80044a0:	b158      	cbz	r0, 80044ba <sqrt+0x4a>
 80044a2:	f7ff ff87 	bl	80043b4 <__errno>
 80044a6:	2321      	movs	r3, #33	@ 0x21
 80044a8:	6003      	str	r3, [r0, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	2300      	movs	r3, #0
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	f7fc f96f 	bl	8000794 <__aeabi_ddiv>
 80044b6:	ec41 0b18 	vmov	d8, r0, r1
 80044ba:	eeb0 0a48 	vmov.f32	s0, s16
 80044be:	eef0 0a68 	vmov.f32	s1, s17
 80044c2:	ecbd 8b02 	vpop	{d8}
 80044c6:	bd38      	pop	{r3, r4, r5, pc}

080044c8 <fabs>:
 80044c8:	ec51 0b10 	vmov	r0, r1, d0
 80044cc:	4602      	mov	r2, r0
 80044ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80044d2:	ec43 2b10 	vmov	d0, r2, r3
 80044d6:	4770      	bx	lr

080044d8 <sin>:
 80044d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044da:	ec53 2b10 	vmov	r2, r3, d0
 80044de:	4826      	ldr	r0, [pc, #152]	@ (8004578 <sin+0xa0>)
 80044e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044e4:	4281      	cmp	r1, r0
 80044e6:	d807      	bhi.n	80044f8 <sin+0x20>
 80044e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004570 <sin+0x98>
 80044ec:	2000      	movs	r0, #0
 80044ee:	b005      	add	sp, #20
 80044f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044f4:	f000 b9f0 	b.w	80048d8 <__kernel_sin>
 80044f8:	4820      	ldr	r0, [pc, #128]	@ (800457c <sin+0xa4>)
 80044fa:	4281      	cmp	r1, r0
 80044fc:	d908      	bls.n	8004510 <sin+0x38>
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f7fb fe65 	bl	80001d0 <__aeabi_dsub>
 8004506:	ec41 0b10 	vmov	d0, r0, r1
 800450a:	b005      	add	sp, #20
 800450c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004510:	4668      	mov	r0, sp
 8004512:	f000 fca1 	bl	8004e58 <__ieee754_rem_pio2>
 8004516:	f000 0003 	and.w	r0, r0, #3
 800451a:	2801      	cmp	r0, #1
 800451c:	d00c      	beq.n	8004538 <sin+0x60>
 800451e:	2802      	cmp	r0, #2
 8004520:	d011      	beq.n	8004546 <sin+0x6e>
 8004522:	b9e8      	cbnz	r0, 8004560 <sin+0x88>
 8004524:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004528:	ed9d 0b00 	vldr	d0, [sp]
 800452c:	2001      	movs	r0, #1
 800452e:	f000 f9d3 	bl	80048d8 <__kernel_sin>
 8004532:	ec51 0b10 	vmov	r0, r1, d0
 8004536:	e7e6      	b.n	8004506 <sin+0x2e>
 8004538:	ed9d 1b02 	vldr	d1, [sp, #8]
 800453c:	ed9d 0b00 	vldr	d0, [sp]
 8004540:	f000 f902 	bl	8004748 <__kernel_cos>
 8004544:	e7f5      	b.n	8004532 <sin+0x5a>
 8004546:	ed9d 1b02 	vldr	d1, [sp, #8]
 800454a:	ed9d 0b00 	vldr	d0, [sp]
 800454e:	2001      	movs	r0, #1
 8004550:	f000 f9c2 	bl	80048d8 <__kernel_sin>
 8004554:	ec53 2b10 	vmov	r2, r3, d0
 8004558:	4610      	mov	r0, r2
 800455a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800455e:	e7d2      	b.n	8004506 <sin+0x2e>
 8004560:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004564:	ed9d 0b00 	vldr	d0, [sp]
 8004568:	f000 f8ee 	bl	8004748 <__kernel_cos>
 800456c:	e7f2      	b.n	8004554 <sin+0x7c>
 800456e:	bf00      	nop
	...
 8004578:	3fe921fb 	.word	0x3fe921fb
 800457c:	7fefffff 	.word	0x7fefffff

08004580 <nan>:
 8004580:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004588 <nan+0x8>
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	00000000 	.word	0x00000000
 800458c:	7ff80000 	.word	0x7ff80000

08004590 <__ieee754_sqrt>:
 8004590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	4a68      	ldr	r2, [pc, #416]	@ (8004738 <__ieee754_sqrt+0x1a8>)
 8004596:	ec55 4b10 	vmov	r4, r5, d0
 800459a:	43aa      	bics	r2, r5
 800459c:	462b      	mov	r3, r5
 800459e:	4621      	mov	r1, r4
 80045a0:	d110      	bne.n	80045c4 <__ieee754_sqrt+0x34>
 80045a2:	4622      	mov	r2, r4
 80045a4:	4620      	mov	r0, r4
 80045a6:	4629      	mov	r1, r5
 80045a8:	f7fb ffca 	bl	8000540 <__aeabi_dmul>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4620      	mov	r0, r4
 80045b2:	4629      	mov	r1, r5
 80045b4:	f7fb fe0e 	bl	80001d4 <__adddf3>
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	ec45 4b10 	vmov	d0, r4, r5
 80045c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c4:	2d00      	cmp	r5, #0
 80045c6:	dc0e      	bgt.n	80045e6 <__ieee754_sqrt+0x56>
 80045c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80045cc:	4322      	orrs	r2, r4
 80045ce:	d0f5      	beq.n	80045bc <__ieee754_sqrt+0x2c>
 80045d0:	b19d      	cbz	r5, 80045fa <__ieee754_sqrt+0x6a>
 80045d2:	4622      	mov	r2, r4
 80045d4:	4620      	mov	r0, r4
 80045d6:	4629      	mov	r1, r5
 80045d8:	f7fb fdfa 	bl	80001d0 <__aeabi_dsub>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	f7fc f8d8 	bl	8000794 <__aeabi_ddiv>
 80045e4:	e7e8      	b.n	80045b8 <__ieee754_sqrt+0x28>
 80045e6:	152a      	asrs	r2, r5, #20
 80045e8:	d115      	bne.n	8004616 <__ieee754_sqrt+0x86>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e009      	b.n	8004602 <__ieee754_sqrt+0x72>
 80045ee:	0acb      	lsrs	r3, r1, #11
 80045f0:	3a15      	subs	r2, #21
 80045f2:	0549      	lsls	r1, r1, #21
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0fa      	beq.n	80045ee <__ieee754_sqrt+0x5e>
 80045f8:	e7f7      	b.n	80045ea <__ieee754_sqrt+0x5a>
 80045fa:	462a      	mov	r2, r5
 80045fc:	e7fa      	b.n	80045f4 <__ieee754_sqrt+0x64>
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	3001      	adds	r0, #1
 8004602:	02dc      	lsls	r4, r3, #11
 8004604:	d5fb      	bpl.n	80045fe <__ieee754_sqrt+0x6e>
 8004606:	1e44      	subs	r4, r0, #1
 8004608:	1b12      	subs	r2, r2, r4
 800460a:	f1c0 0420 	rsb	r4, r0, #32
 800460e:	fa21 f404 	lsr.w	r4, r1, r4
 8004612:	4323      	orrs	r3, r4
 8004614:	4081      	lsls	r1, r0
 8004616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800461a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800461e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004622:	07d2      	lsls	r2, r2, #31
 8004624:	bf5c      	itt	pl
 8004626:	005b      	lslpl	r3, r3, #1
 8004628:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800462c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004630:	bf58      	it	pl
 8004632:	0049      	lslpl	r1, r1, #1
 8004634:	2600      	movs	r6, #0
 8004636:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800463a:	106d      	asrs	r5, r5, #1
 800463c:	0049      	lsls	r1, r1, #1
 800463e:	2016      	movs	r0, #22
 8004640:	4632      	mov	r2, r6
 8004642:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004646:	1917      	adds	r7, r2, r4
 8004648:	429f      	cmp	r7, r3
 800464a:	bfde      	ittt	le
 800464c:	193a      	addle	r2, r7, r4
 800464e:	1bdb      	suble	r3, r3, r7
 8004650:	1936      	addle	r6, r6, r4
 8004652:	0fcf      	lsrs	r7, r1, #31
 8004654:	3801      	subs	r0, #1
 8004656:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800465a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800465e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004662:	d1f0      	bne.n	8004646 <__ieee754_sqrt+0xb6>
 8004664:	4604      	mov	r4, r0
 8004666:	2720      	movs	r7, #32
 8004668:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800466c:	429a      	cmp	r2, r3
 800466e:	eb00 0e0c 	add.w	lr, r0, ip
 8004672:	db02      	blt.n	800467a <__ieee754_sqrt+0xea>
 8004674:	d113      	bne.n	800469e <__ieee754_sqrt+0x10e>
 8004676:	458e      	cmp	lr, r1
 8004678:	d811      	bhi.n	800469e <__ieee754_sqrt+0x10e>
 800467a:	f1be 0f00 	cmp.w	lr, #0
 800467e:	eb0e 000c 	add.w	r0, lr, ip
 8004682:	da42      	bge.n	800470a <__ieee754_sqrt+0x17a>
 8004684:	2800      	cmp	r0, #0
 8004686:	db40      	blt.n	800470a <__ieee754_sqrt+0x17a>
 8004688:	f102 0801 	add.w	r8, r2, #1
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	458e      	cmp	lr, r1
 8004690:	bf88      	it	hi
 8004692:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004696:	eba1 010e 	sub.w	r1, r1, lr
 800469a:	4464      	add	r4, ip
 800469c:	4642      	mov	r2, r8
 800469e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80046a2:	3f01      	subs	r7, #1
 80046a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80046a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80046ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80046b0:	d1dc      	bne.n	800466c <__ieee754_sqrt+0xdc>
 80046b2:	4319      	orrs	r1, r3
 80046b4:	d01b      	beq.n	80046ee <__ieee754_sqrt+0x15e>
 80046b6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800473c <__ieee754_sqrt+0x1ac>
 80046ba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004740 <__ieee754_sqrt+0x1b0>
 80046be:	e9da 0100 	ldrd	r0, r1, [sl]
 80046c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80046c6:	f7fb fd83 	bl	80001d0 <__aeabi_dsub>
 80046ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4640      	mov	r0, r8
 80046d4:	4649      	mov	r1, r9
 80046d6:	f7fc f9af 	bl	8000a38 <__aeabi_dcmple>
 80046da:	b140      	cbz	r0, 80046ee <__ieee754_sqrt+0x15e>
 80046dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80046e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80046e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80046e8:	d111      	bne.n	800470e <__ieee754_sqrt+0x17e>
 80046ea:	3601      	adds	r6, #1
 80046ec:	463c      	mov	r4, r7
 80046ee:	1072      	asrs	r2, r6, #1
 80046f0:	0863      	lsrs	r3, r4, #1
 80046f2:	07f1      	lsls	r1, r6, #31
 80046f4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80046f8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80046fc:	bf48      	it	mi
 80046fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004702:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004706:	4618      	mov	r0, r3
 8004708:	e756      	b.n	80045b8 <__ieee754_sqrt+0x28>
 800470a:	4690      	mov	r8, r2
 800470c:	e7be      	b.n	800468c <__ieee754_sqrt+0xfc>
 800470e:	f7fb fd61 	bl	80001d4 <__adddf3>
 8004712:	e9da 8900 	ldrd	r8, r9, [sl]
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	f7fc f981 	bl	8000a24 <__aeabi_dcmplt>
 8004722:	b120      	cbz	r0, 800472e <__ieee754_sqrt+0x19e>
 8004724:	1ca0      	adds	r0, r4, #2
 8004726:	bf08      	it	eq
 8004728:	3601      	addeq	r6, #1
 800472a:	3402      	adds	r4, #2
 800472c:	e7df      	b.n	80046ee <__ieee754_sqrt+0x15e>
 800472e:	1c63      	adds	r3, r4, #1
 8004730:	f023 0401 	bic.w	r4, r3, #1
 8004734:	e7db      	b.n	80046ee <__ieee754_sqrt+0x15e>
 8004736:	bf00      	nop
 8004738:	7ff00000 	.word	0x7ff00000
 800473c:	20000068 	.word	0x20000068
 8004740:	20000060 	.word	0x20000060
 8004744:	00000000 	.word	0x00000000

08004748 <__kernel_cos>:
 8004748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474c:	ec57 6b10 	vmov	r6, r7, d0
 8004750:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004754:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004758:	ed8d 1b00 	vstr	d1, [sp]
 800475c:	d206      	bcs.n	800476c <__kernel_cos+0x24>
 800475e:	4630      	mov	r0, r6
 8004760:	4639      	mov	r1, r7
 8004762:	f7fc f99d 	bl	8000aa0 <__aeabi_d2iz>
 8004766:	2800      	cmp	r0, #0
 8004768:	f000 8088 	beq.w	800487c <__kernel_cos+0x134>
 800476c:	4632      	mov	r2, r6
 800476e:	463b      	mov	r3, r7
 8004770:	4630      	mov	r0, r6
 8004772:	4639      	mov	r1, r7
 8004774:	f7fb fee4 	bl	8000540 <__aeabi_dmul>
 8004778:	4b51      	ldr	r3, [pc, #324]	@ (80048c0 <__kernel_cos+0x178>)
 800477a:	2200      	movs	r2, #0
 800477c:	4604      	mov	r4, r0
 800477e:	460d      	mov	r5, r1
 8004780:	f7fb fede 	bl	8000540 <__aeabi_dmul>
 8004784:	a340      	add	r3, pc, #256	@ (adr r3, 8004888 <__kernel_cos+0x140>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	4682      	mov	sl, r0
 800478c:	468b      	mov	fp, r1
 800478e:	4620      	mov	r0, r4
 8004790:	4629      	mov	r1, r5
 8004792:	f7fb fed5 	bl	8000540 <__aeabi_dmul>
 8004796:	a33e      	add	r3, pc, #248	@ (adr r3, 8004890 <__kernel_cos+0x148>)
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f7fb fd1a 	bl	80001d4 <__adddf3>
 80047a0:	4622      	mov	r2, r4
 80047a2:	462b      	mov	r3, r5
 80047a4:	f7fb fecc 	bl	8000540 <__aeabi_dmul>
 80047a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8004898 <__kernel_cos+0x150>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fb fd0f 	bl	80001d0 <__aeabi_dsub>
 80047b2:	4622      	mov	r2, r4
 80047b4:	462b      	mov	r3, r5
 80047b6:	f7fb fec3 	bl	8000540 <__aeabi_dmul>
 80047ba:	a339      	add	r3, pc, #228	@ (adr r3, 80048a0 <__kernel_cos+0x158>)
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f7fb fd08 	bl	80001d4 <__adddf3>
 80047c4:	4622      	mov	r2, r4
 80047c6:	462b      	mov	r3, r5
 80047c8:	f7fb feba 	bl	8000540 <__aeabi_dmul>
 80047cc:	a336      	add	r3, pc, #216	@ (adr r3, 80048a8 <__kernel_cos+0x160>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f7fb fcfd 	bl	80001d0 <__aeabi_dsub>
 80047d6:	4622      	mov	r2, r4
 80047d8:	462b      	mov	r3, r5
 80047da:	f7fb feb1 	bl	8000540 <__aeabi_dmul>
 80047de:	a334      	add	r3, pc, #208	@ (adr r3, 80048b0 <__kernel_cos+0x168>)
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f7fb fcf6 	bl	80001d4 <__adddf3>
 80047e8:	4622      	mov	r2, r4
 80047ea:	462b      	mov	r3, r5
 80047ec:	f7fb fea8 	bl	8000540 <__aeabi_dmul>
 80047f0:	4622      	mov	r2, r4
 80047f2:	462b      	mov	r3, r5
 80047f4:	f7fb fea4 	bl	8000540 <__aeabi_dmul>
 80047f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047fc:	4604      	mov	r4, r0
 80047fe:	460d      	mov	r5, r1
 8004800:	4630      	mov	r0, r6
 8004802:	4639      	mov	r1, r7
 8004804:	f7fb fe9c 	bl	8000540 <__aeabi_dmul>
 8004808:	460b      	mov	r3, r1
 800480a:	4602      	mov	r2, r0
 800480c:	4629      	mov	r1, r5
 800480e:	4620      	mov	r0, r4
 8004810:	f7fb fcde 	bl	80001d0 <__aeabi_dsub>
 8004814:	4b2b      	ldr	r3, [pc, #172]	@ (80048c4 <__kernel_cos+0x17c>)
 8004816:	4598      	cmp	r8, r3
 8004818:	4606      	mov	r6, r0
 800481a:	460f      	mov	r7, r1
 800481c:	d810      	bhi.n	8004840 <__kernel_cos+0xf8>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4650      	mov	r0, sl
 8004824:	4659      	mov	r1, fp
 8004826:	f7fb fcd3 	bl	80001d0 <__aeabi_dsub>
 800482a:	460b      	mov	r3, r1
 800482c:	4926      	ldr	r1, [pc, #152]	@ (80048c8 <__kernel_cos+0x180>)
 800482e:	4602      	mov	r2, r0
 8004830:	2000      	movs	r0, #0
 8004832:	f7fb fccd 	bl	80001d0 <__aeabi_dsub>
 8004836:	ec41 0b10 	vmov	d0, r0, r1
 800483a:	b003      	add	sp, #12
 800483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004840:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <__kernel_cos+0x184>)
 8004842:	4921      	ldr	r1, [pc, #132]	@ (80048c8 <__kernel_cos+0x180>)
 8004844:	4598      	cmp	r8, r3
 8004846:	bf8c      	ite	hi
 8004848:	4d21      	ldrhi	r5, [pc, #132]	@ (80048d0 <__kernel_cos+0x188>)
 800484a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800484e:	2400      	movs	r4, #0
 8004850:	4622      	mov	r2, r4
 8004852:	462b      	mov	r3, r5
 8004854:	2000      	movs	r0, #0
 8004856:	f7fb fcbb 	bl	80001d0 <__aeabi_dsub>
 800485a:	4622      	mov	r2, r4
 800485c:	4680      	mov	r8, r0
 800485e:	4689      	mov	r9, r1
 8004860:	462b      	mov	r3, r5
 8004862:	4650      	mov	r0, sl
 8004864:	4659      	mov	r1, fp
 8004866:	f7fb fcb3 	bl	80001d0 <__aeabi_dsub>
 800486a:	4632      	mov	r2, r6
 800486c:	463b      	mov	r3, r7
 800486e:	f7fb fcaf 	bl	80001d0 <__aeabi_dsub>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4640      	mov	r0, r8
 8004878:	4649      	mov	r1, r9
 800487a:	e7da      	b.n	8004832 <__kernel_cos+0xea>
 800487c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80048b8 <__kernel_cos+0x170>
 8004880:	e7db      	b.n	800483a <__kernel_cos+0xf2>
 8004882:	bf00      	nop
 8004884:	f3af 8000 	nop.w
 8004888:	be8838d4 	.word	0xbe8838d4
 800488c:	bda8fae9 	.word	0xbda8fae9
 8004890:	bdb4b1c4 	.word	0xbdb4b1c4
 8004894:	3e21ee9e 	.word	0x3e21ee9e
 8004898:	809c52ad 	.word	0x809c52ad
 800489c:	3e927e4f 	.word	0x3e927e4f
 80048a0:	19cb1590 	.word	0x19cb1590
 80048a4:	3efa01a0 	.word	0x3efa01a0
 80048a8:	16c15177 	.word	0x16c15177
 80048ac:	3f56c16c 	.word	0x3f56c16c
 80048b0:	5555554c 	.word	0x5555554c
 80048b4:	3fa55555 	.word	0x3fa55555
 80048b8:	00000000 	.word	0x00000000
 80048bc:	3ff00000 	.word	0x3ff00000
 80048c0:	3fe00000 	.word	0x3fe00000
 80048c4:	3fd33332 	.word	0x3fd33332
 80048c8:	3ff00000 	.word	0x3ff00000
 80048cc:	3fe90000 	.word	0x3fe90000
 80048d0:	3fd20000 	.word	0x3fd20000
 80048d4:	00000000 	.word	0x00000000

080048d8 <__kernel_sin>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	ec55 4b10 	vmov	r4, r5, d0
 80048e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80048e4:	b085      	sub	sp, #20
 80048e6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80048ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 80048ee:	4680      	mov	r8, r0
 80048f0:	d205      	bcs.n	80048fe <__kernel_sin+0x26>
 80048f2:	4620      	mov	r0, r4
 80048f4:	4629      	mov	r1, r5
 80048f6:	f7fc f8d3 	bl	8000aa0 <__aeabi_d2iz>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d052      	beq.n	80049a4 <__kernel_sin+0xcc>
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f7fb fe1b 	bl	8000540 <__aeabi_dmul>
 800490a:	4682      	mov	sl, r0
 800490c:	468b      	mov	fp, r1
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4620      	mov	r0, r4
 8004914:	4629      	mov	r1, r5
 8004916:	f7fb fe13 	bl	8000540 <__aeabi_dmul>
 800491a:	a342      	add	r3, pc, #264	@ (adr r3, 8004a24 <__kernel_sin+0x14c>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	e9cd 0100 	strd	r0, r1, [sp]
 8004924:	4650      	mov	r0, sl
 8004926:	4659      	mov	r1, fp
 8004928:	f7fb fe0a 	bl	8000540 <__aeabi_dmul>
 800492c:	a33f      	add	r3, pc, #252	@ (adr r3, 8004a2c <__kernel_sin+0x154>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f7fb fc4d 	bl	80001d0 <__aeabi_dsub>
 8004936:	4652      	mov	r2, sl
 8004938:	465b      	mov	r3, fp
 800493a:	f7fb fe01 	bl	8000540 <__aeabi_dmul>
 800493e:	a33d      	add	r3, pc, #244	@ (adr r3, 8004a34 <__kernel_sin+0x15c>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fc46 	bl	80001d4 <__adddf3>
 8004948:	4652      	mov	r2, sl
 800494a:	465b      	mov	r3, fp
 800494c:	f7fb fdf8 	bl	8000540 <__aeabi_dmul>
 8004950:	a33a      	add	r3, pc, #232	@ (adr r3, 8004a3c <__kernel_sin+0x164>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f7fb fc3b 	bl	80001d0 <__aeabi_dsub>
 800495a:	4652      	mov	r2, sl
 800495c:	465b      	mov	r3, fp
 800495e:	f7fb fdef 	bl	8000540 <__aeabi_dmul>
 8004962:	a338      	add	r3, pc, #224	@ (adr r3, 8004a44 <__kernel_sin+0x16c>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fc34 	bl	80001d4 <__adddf3>
 800496c:	4606      	mov	r6, r0
 800496e:	460f      	mov	r7, r1
 8004970:	f1b8 0f00 	cmp.w	r8, #0
 8004974:	d11b      	bne.n	80049ae <__kernel_sin+0xd6>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4650      	mov	r0, sl
 800497c:	4659      	mov	r1, fp
 800497e:	f7fb fddf 	bl	8000540 <__aeabi_dmul>
 8004982:	a325      	add	r3, pc, #148	@ (adr r3, 8004a18 <__kernel_sin+0x140>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fb fc22 	bl	80001d0 <__aeabi_dsub>
 800498c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004990:	f7fb fdd6 	bl	8000540 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4620      	mov	r0, r4
 800499a:	4629      	mov	r1, r5
 800499c:	f7fb fc1a 	bl	80001d4 <__adddf3>
 80049a0:	4604      	mov	r4, r0
 80049a2:	460d      	mov	r5, r1
 80049a4:	ec45 4b10 	vmov	d0, r4, r5
 80049a8:	b005      	add	sp, #20
 80049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <__kernel_sin+0x148>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	f7fb fdc3 	bl	8000540 <__aeabi_dmul>
 80049ba:	4632      	mov	r2, r6
 80049bc:	4680      	mov	r8, r0
 80049be:	4689      	mov	r9, r1
 80049c0:	463b      	mov	r3, r7
 80049c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049c6:	f7fb fdbb 	bl	8000540 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4640      	mov	r0, r8
 80049d0:	4649      	mov	r1, r9
 80049d2:	f7fb fbfd 	bl	80001d0 <__aeabi_dsub>
 80049d6:	4652      	mov	r2, sl
 80049d8:	465b      	mov	r3, fp
 80049da:	f7fb fdb1 	bl	8000540 <__aeabi_dmul>
 80049de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049e2:	f7fb fbf5 	bl	80001d0 <__aeabi_dsub>
 80049e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8004a18 <__kernel_sin+0x140>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	4606      	mov	r6, r0
 80049ee:	460f      	mov	r7, r1
 80049f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049f4:	f7fb fda4 	bl	8000540 <__aeabi_dmul>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4630      	mov	r0, r6
 80049fe:	4639      	mov	r1, r7
 8004a00:	f7fb fbe8 	bl	80001d4 <__adddf3>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4620      	mov	r0, r4
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	f7fb fbe0 	bl	80001d0 <__aeabi_dsub>
 8004a10:	e7c6      	b.n	80049a0 <__kernel_sin+0xc8>
 8004a12:	bf00      	nop
 8004a14:	f3af 8000 	nop.w
 8004a18:	55555549 	.word	0x55555549
 8004a1c:	3fc55555 	.word	0x3fc55555
 8004a20:	3fe00000 	.word	0x3fe00000
 8004a24:	5acfd57c 	.word	0x5acfd57c
 8004a28:	3de5d93a 	.word	0x3de5d93a
 8004a2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004a30:	3e5ae5e6 	.word	0x3e5ae5e6
 8004a34:	57b1fe7d 	.word	0x57b1fe7d
 8004a38:	3ec71de3 	.word	0x3ec71de3
 8004a3c:	19c161d5 	.word	0x19c161d5
 8004a40:	3f2a01a0 	.word	0x3f2a01a0
 8004a44:	1110f8a6 	.word	0x1110f8a6
 8004a48:	3f811111 	.word	0x3f811111
 8004a4c:	00000000 	.word	0x00000000

08004a50 <__ieee754_asin>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	ec55 4b10 	vmov	r4, r5, d0
 8004a58:	4bc7      	ldr	r3, [pc, #796]	@ (8004d78 <__ieee754_asin+0x328>)
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8004a60:	429e      	cmp	r6, r3
 8004a62:	9501      	str	r5, [sp, #4]
 8004a64:	d92d      	bls.n	8004ac2 <__ieee754_asin+0x72>
 8004a66:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004a6a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004a6e:	4326      	orrs	r6, r4
 8004a70:	d116      	bne.n	8004aa0 <__ieee754_asin+0x50>
 8004a72:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004d10 <__ieee754_asin+0x2c0>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f7fb fd60 	bl	8000540 <__aeabi_dmul>
 8004a80:	a3a5      	add	r3, pc, #660	@ (adr r3, 8004d18 <__ieee754_asin+0x2c8>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	4606      	mov	r6, r0
 8004a88:	460f      	mov	r7, r1
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fb fd57 	bl	8000540 <__aeabi_dmul>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4630      	mov	r0, r6
 8004a98:	4639      	mov	r1, r7
 8004a9a:	f7fb fb9b 	bl	80001d4 <__adddf3>
 8004a9e:	e009      	b.n	8004ab4 <__ieee754_asin+0x64>
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	f7fb fb92 	bl	80001d0 <__aeabi_dsub>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	f7fb fe70 	bl	8000794 <__aeabi_ddiv>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	460d      	mov	r5, r1
 8004ab8:	ec45 4b10 	vmov	d0, r4, r5
 8004abc:	b007      	add	sp, #28
 8004abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac2:	4bae      	ldr	r3, [pc, #696]	@ (8004d7c <__ieee754_asin+0x32c>)
 8004ac4:	429e      	cmp	r6, r3
 8004ac6:	d810      	bhi.n	8004aea <__ieee754_asin+0x9a>
 8004ac8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8004acc:	f080 80ad 	bcs.w	8004c2a <__ieee754_asin+0x1da>
 8004ad0:	a393      	add	r3, pc, #588	@ (adr r3, 8004d20 <__ieee754_asin+0x2d0>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f7fb fb7b 	bl	80001d4 <__adddf3>
 8004ade:	4ba8      	ldr	r3, [pc, #672]	@ (8004d80 <__ieee754_asin+0x330>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f7fb ffbd 	bl	8000a60 <__aeabi_dcmpgt>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <__ieee754_asin+0x68>
 8004aea:	ec45 4b10 	vmov	d0, r4, r5
 8004aee:	f7ff fceb 	bl	80044c8 <fabs>
 8004af2:	49a3      	ldr	r1, [pc, #652]	@ (8004d80 <__ieee754_asin+0x330>)
 8004af4:	ec53 2b10 	vmov	r2, r3, d0
 8004af8:	2000      	movs	r0, #0
 8004afa:	f7fb fb69 	bl	80001d0 <__aeabi_dsub>
 8004afe:	4ba1      	ldr	r3, [pc, #644]	@ (8004d84 <__ieee754_asin+0x334>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	f7fb fd1d 	bl	8000540 <__aeabi_dmul>
 8004b06:	a388      	add	r3, pc, #544	@ (adr r3, 8004d28 <__ieee754_asin+0x2d8>)
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	460d      	mov	r5, r1
 8004b10:	f7fb fd16 	bl	8000540 <__aeabi_dmul>
 8004b14:	a386      	add	r3, pc, #536	@ (adr r3, 8004d30 <__ieee754_asin+0x2e0>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fb5b 	bl	80001d4 <__adddf3>
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	f7fb fd0d 	bl	8000540 <__aeabi_dmul>
 8004b26:	a384      	add	r3, pc, #528	@ (adr r3, 8004d38 <__ieee754_asin+0x2e8>)
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f7fb fb50 	bl	80001d0 <__aeabi_dsub>
 8004b30:	4622      	mov	r2, r4
 8004b32:	462b      	mov	r3, r5
 8004b34:	f7fb fd04 	bl	8000540 <__aeabi_dmul>
 8004b38:	a381      	add	r3, pc, #516	@ (adr r3, 8004d40 <__ieee754_asin+0x2f0>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f7fb fb49 	bl	80001d4 <__adddf3>
 8004b42:	4622      	mov	r2, r4
 8004b44:	462b      	mov	r3, r5
 8004b46:	f7fb fcfb 	bl	8000540 <__aeabi_dmul>
 8004b4a:	a37f      	add	r3, pc, #508	@ (adr r3, 8004d48 <__ieee754_asin+0x2f8>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fb3e 	bl	80001d0 <__aeabi_dsub>
 8004b54:	4622      	mov	r2, r4
 8004b56:	462b      	mov	r3, r5
 8004b58:	f7fb fcf2 	bl	8000540 <__aeabi_dmul>
 8004b5c:	a37c      	add	r3, pc, #496	@ (adr r3, 8004d50 <__ieee754_asin+0x300>)
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	f7fb fb37 	bl	80001d4 <__adddf3>
 8004b66:	4622      	mov	r2, r4
 8004b68:	462b      	mov	r3, r5
 8004b6a:	f7fb fce9 	bl	8000540 <__aeabi_dmul>
 8004b6e:	a37a      	add	r3, pc, #488	@ (adr r3, 8004d58 <__ieee754_asin+0x308>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b78:	4620      	mov	r0, r4
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	f7fb fce0 	bl	8000540 <__aeabi_dmul>
 8004b80:	a377      	add	r3, pc, #476	@ (adr r3, 8004d60 <__ieee754_asin+0x310>)
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f7fb fb23 	bl	80001d0 <__aeabi_dsub>
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	f7fb fcd7 	bl	8000540 <__aeabi_dmul>
 8004b92:	a375      	add	r3, pc, #468	@ (adr r3, 8004d68 <__ieee754_asin+0x318>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f7fb fb1c 	bl	80001d4 <__adddf3>
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	f7fb fcce 	bl	8000540 <__aeabi_dmul>
 8004ba4:	a372      	add	r3, pc, #456	@ (adr r3, 8004d70 <__ieee754_asin+0x320>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f7fb fb11 	bl	80001d0 <__aeabi_dsub>
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	f7fb fcc5 	bl	8000540 <__aeabi_dmul>
 8004bb6:	4b72      	ldr	r3, [pc, #456]	@ (8004d80 <__ieee754_asin+0x330>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f7fb fb0b 	bl	80001d4 <__adddf3>
 8004bbe:	ec45 4b10 	vmov	d0, r4, r5
 8004bc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bc6:	f7ff fce3 	bl	8004590 <__ieee754_sqrt>
 8004bca:	4b6f      	ldr	r3, [pc, #444]	@ (8004d88 <__ieee754_asin+0x338>)
 8004bcc:	429e      	cmp	r6, r3
 8004bce:	ec5b ab10 	vmov	sl, fp, d0
 8004bd2:	f240 80db 	bls.w	8004d8c <__ieee754_asin+0x33c>
 8004bd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bde:	f7fb fdd9 	bl	8000794 <__aeabi_ddiv>
 8004be2:	4652      	mov	r2, sl
 8004be4:	465b      	mov	r3, fp
 8004be6:	f7fb fcab 	bl	8000540 <__aeabi_dmul>
 8004bea:	4652      	mov	r2, sl
 8004bec:	465b      	mov	r3, fp
 8004bee:	f7fb faf1 	bl	80001d4 <__adddf3>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	f7fb faed 	bl	80001d4 <__adddf3>
 8004bfa:	a347      	add	r3, pc, #284	@ (adr r3, 8004d18 <__ieee754_asin+0x2c8>)
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f7fb fae6 	bl	80001d0 <__aeabi_dsub>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	a141      	add	r1, pc, #260	@ (adr r1, 8004d10 <__ieee754_asin+0x2c0>)
 8004c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c0e:	f7fb fadf 	bl	80001d0 <__aeabi_dsub>
 8004c12:	9b01      	ldr	r3, [sp, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bfdc      	itt	le
 8004c18:	4602      	movle	r2, r0
 8004c1a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8004c1e:	4604      	mov	r4, r0
 8004c20:	460d      	mov	r5, r1
 8004c22:	bfdc      	itt	le
 8004c24:	4614      	movle	r4, r2
 8004c26:	461d      	movle	r5, r3
 8004c28:	e746      	b.n	8004ab8 <__ieee754_asin+0x68>
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	4620      	mov	r0, r4
 8004c30:	4629      	mov	r1, r5
 8004c32:	f7fb fc85 	bl	8000540 <__aeabi_dmul>
 8004c36:	a33c      	add	r3, pc, #240	@ (adr r3, 8004d28 <__ieee754_asin+0x2d8>)
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	460f      	mov	r7, r1
 8004c40:	f7fb fc7e 	bl	8000540 <__aeabi_dmul>
 8004c44:	a33a      	add	r3, pc, #232	@ (adr r3, 8004d30 <__ieee754_asin+0x2e0>)
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f7fb fac3 	bl	80001d4 <__adddf3>
 8004c4e:	4632      	mov	r2, r6
 8004c50:	463b      	mov	r3, r7
 8004c52:	f7fb fc75 	bl	8000540 <__aeabi_dmul>
 8004c56:	a338      	add	r3, pc, #224	@ (adr r3, 8004d38 <__ieee754_asin+0x2e8>)
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f7fb fab8 	bl	80001d0 <__aeabi_dsub>
 8004c60:	4632      	mov	r2, r6
 8004c62:	463b      	mov	r3, r7
 8004c64:	f7fb fc6c 	bl	8000540 <__aeabi_dmul>
 8004c68:	a335      	add	r3, pc, #212	@ (adr r3, 8004d40 <__ieee754_asin+0x2f0>)
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f7fb fab1 	bl	80001d4 <__adddf3>
 8004c72:	4632      	mov	r2, r6
 8004c74:	463b      	mov	r3, r7
 8004c76:	f7fb fc63 	bl	8000540 <__aeabi_dmul>
 8004c7a:	a333      	add	r3, pc, #204	@ (adr r3, 8004d48 <__ieee754_asin+0x2f8>)
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f7fb faa6 	bl	80001d0 <__aeabi_dsub>
 8004c84:	4632      	mov	r2, r6
 8004c86:	463b      	mov	r3, r7
 8004c88:	f7fb fc5a 	bl	8000540 <__aeabi_dmul>
 8004c8c:	a330      	add	r3, pc, #192	@ (adr r3, 8004d50 <__ieee754_asin+0x300>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fa9f 	bl	80001d4 <__adddf3>
 8004c96:	4632      	mov	r2, r6
 8004c98:	463b      	mov	r3, r7
 8004c9a:	f7fb fc51 	bl	8000540 <__aeabi_dmul>
 8004c9e:	a32e      	add	r3, pc, #184	@ (adr r3, 8004d58 <__ieee754_asin+0x308>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	4689      	mov	r9, r1
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	f7fb fc48 	bl	8000540 <__aeabi_dmul>
 8004cb0:	a32b      	add	r3, pc, #172	@ (adr r3, 8004d60 <__ieee754_asin+0x310>)
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f7fb fa8b 	bl	80001d0 <__aeabi_dsub>
 8004cba:	4632      	mov	r2, r6
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	f7fb fc3f 	bl	8000540 <__aeabi_dmul>
 8004cc2:	a329      	add	r3, pc, #164	@ (adr r3, 8004d68 <__ieee754_asin+0x318>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f7fb fa84 	bl	80001d4 <__adddf3>
 8004ccc:	4632      	mov	r2, r6
 8004cce:	463b      	mov	r3, r7
 8004cd0:	f7fb fc36 	bl	8000540 <__aeabi_dmul>
 8004cd4:	a326      	add	r3, pc, #152	@ (adr r3, 8004d70 <__ieee754_asin+0x320>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f7fb fa79 	bl	80001d0 <__aeabi_dsub>
 8004cde:	4632      	mov	r2, r6
 8004ce0:	463b      	mov	r3, r7
 8004ce2:	f7fb fc2d 	bl	8000540 <__aeabi_dmul>
 8004ce6:	4b26      	ldr	r3, [pc, #152]	@ (8004d80 <__ieee754_asin+0x330>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f7fb fa73 	bl	80001d4 <__adddf3>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	f7fb fd4d 	bl	8000794 <__aeabi_ddiv>
 8004cfa:	4622      	mov	r2, r4
 8004cfc:	462b      	mov	r3, r5
 8004cfe:	f7fb fc1f 	bl	8000540 <__aeabi_dmul>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4620      	mov	r0, r4
 8004d08:	4629      	mov	r1, r5
 8004d0a:	e6c6      	b.n	8004a9a <__ieee754_asin+0x4a>
 8004d0c:	f3af 8000 	nop.w
 8004d10:	54442d18 	.word	0x54442d18
 8004d14:	3ff921fb 	.word	0x3ff921fb
 8004d18:	33145c07 	.word	0x33145c07
 8004d1c:	3c91a626 	.word	0x3c91a626
 8004d20:	8800759c 	.word	0x8800759c
 8004d24:	7e37e43c 	.word	0x7e37e43c
 8004d28:	0dfdf709 	.word	0x0dfdf709
 8004d2c:	3f023de1 	.word	0x3f023de1
 8004d30:	7501b288 	.word	0x7501b288
 8004d34:	3f49efe0 	.word	0x3f49efe0
 8004d38:	b5688f3b 	.word	0xb5688f3b
 8004d3c:	3fa48228 	.word	0x3fa48228
 8004d40:	0e884455 	.word	0x0e884455
 8004d44:	3fc9c155 	.word	0x3fc9c155
 8004d48:	03eb6f7d 	.word	0x03eb6f7d
 8004d4c:	3fd4d612 	.word	0x3fd4d612
 8004d50:	55555555 	.word	0x55555555
 8004d54:	3fc55555 	.word	0x3fc55555
 8004d58:	b12e9282 	.word	0xb12e9282
 8004d5c:	3fb3b8c5 	.word	0x3fb3b8c5
 8004d60:	1b8d0159 	.word	0x1b8d0159
 8004d64:	3fe6066c 	.word	0x3fe6066c
 8004d68:	9c598ac8 	.word	0x9c598ac8
 8004d6c:	40002ae5 	.word	0x40002ae5
 8004d70:	1c8a2d4b 	.word	0x1c8a2d4b
 8004d74:	40033a27 	.word	0x40033a27
 8004d78:	3fefffff 	.word	0x3fefffff
 8004d7c:	3fdfffff 	.word	0x3fdfffff
 8004d80:	3ff00000 	.word	0x3ff00000
 8004d84:	3fe00000 	.word	0x3fe00000
 8004d88:	3fef3332 	.word	0x3fef3332
 8004d8c:	4652      	mov	r2, sl
 8004d8e:	465b      	mov	r3, fp
 8004d90:	4650      	mov	r0, sl
 8004d92:	4659      	mov	r1, fp
 8004d94:	f7fb fa1e 	bl	80001d4 <__adddf3>
 8004d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	460f      	mov	r7, r1
 8004da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da4:	f7fb fcf6 	bl	8000794 <__aeabi_ddiv>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4630      	mov	r0, r6
 8004dae:	4639      	mov	r1, r7
 8004db0:	f7fb fbc6 	bl	8000540 <__aeabi_dmul>
 8004db4:	f04f 0800 	mov.w	r8, #0
 8004db8:	4606      	mov	r6, r0
 8004dba:	460f      	mov	r7, r1
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	465b      	mov	r3, fp
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	4659      	mov	r1, fp
 8004dc4:	f7fb fbbc 	bl	8000540 <__aeabi_dmul>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	f7fb f9fe 	bl	80001d0 <__aeabi_dsub>
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	460d      	mov	r5, r1
 8004dda:	465b      	mov	r3, fp
 8004ddc:	4650      	mov	r0, sl
 8004dde:	4659      	mov	r1, fp
 8004de0:	f7fb f9f8 	bl	80001d4 <__adddf3>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb fcd2 	bl	8000794 <__aeabi_ddiv>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	f7fb f9ee 	bl	80001d4 <__adddf3>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	a112      	add	r1, pc, #72	@ (adr r1, 8004e48 <__ieee754_asin+0x3f8>)
 8004dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e02:	f7fb f9e5 	bl	80001d0 <__aeabi_dsub>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	f7fb f9df 	bl	80001d0 <__aeabi_dsub>
 8004e12:	4642      	mov	r2, r8
 8004e14:	4604      	mov	r4, r0
 8004e16:	460d      	mov	r5, r1
 8004e18:	465b      	mov	r3, fp
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	f7fb f9d9 	bl	80001d4 <__adddf3>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	a10a      	add	r1, pc, #40	@ (adr r1, 8004e50 <__ieee754_asin+0x400>)
 8004e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e2c:	f7fb f9d0 	bl	80001d0 <__aeabi_dsub>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb f9ca 	bl	80001d0 <__aeabi_dsub>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	a103      	add	r1, pc, #12	@ (adr r1, 8004e50 <__ieee754_asin+0x400>)
 8004e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e46:	e6e2      	b.n	8004c0e <__ieee754_asin+0x1be>
 8004e48:	33145c07 	.word	0x33145c07
 8004e4c:	3c91a626 	.word	0x3c91a626
 8004e50:	54442d18 	.word	0x54442d18
 8004e54:	3fe921fb 	.word	0x3fe921fb

08004e58 <__ieee754_rem_pio2>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	ec57 6b10 	vmov	r6, r7, d0
 8004e60:	4bc5      	ldr	r3, [pc, #788]	@ (8005178 <__ieee754_rem_pio2+0x320>)
 8004e62:	b08d      	sub	sp, #52	@ 0x34
 8004e64:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004e68:	4598      	cmp	r8, r3
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	9704      	str	r7, [sp, #16]
 8004e6e:	d807      	bhi.n	8004e80 <__ieee754_rem_pio2+0x28>
 8004e70:	2200      	movs	r2, #0
 8004e72:	2300      	movs	r3, #0
 8004e74:	ed80 0b00 	vstr	d0, [r0]
 8004e78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	e028      	b.n	8004ed2 <__ieee754_rem_pio2+0x7a>
 8004e80:	4bbe      	ldr	r3, [pc, #760]	@ (800517c <__ieee754_rem_pio2+0x324>)
 8004e82:	4598      	cmp	r8, r3
 8004e84:	d878      	bhi.n	8004f78 <__ieee754_rem_pio2+0x120>
 8004e86:	9b04      	ldr	r3, [sp, #16]
 8004e88:	4dbd      	ldr	r5, [pc, #756]	@ (8005180 <__ieee754_rem_pio2+0x328>)
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005140 <__ieee754_rem_pio2+0x2e8>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	4639      	mov	r1, r7
 8004e96:	dd38      	ble.n	8004f0a <__ieee754_rem_pio2+0xb2>
 8004e98:	f7fb f99a 	bl	80001d0 <__aeabi_dsub>
 8004e9c:	45a8      	cmp	r8, r5
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	460f      	mov	r7, r1
 8004ea2:	d01a      	beq.n	8004eda <__ieee754_rem_pio2+0x82>
 8004ea4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005148 <__ieee754_rem_pio2+0x2f0>)
 8004ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eaa:	f7fb f991 	bl	80001d0 <__aeabi_dsub>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4680      	mov	r8, r0
 8004eb4:	4689      	mov	r9, r1
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f7fb f989 	bl	80001d0 <__aeabi_dsub>
 8004ebe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005148 <__ieee754_rem_pio2+0x2f0>)
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f7fb f984 	bl	80001d0 <__aeabi_dsub>
 8004ec8:	e9c4 8900 	strd	r8, r9, [r4]
 8004ecc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ed0:	2501      	movs	r5, #1
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	b00d      	add	sp, #52	@ 0x34
 8004ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eda:	a39d      	add	r3, pc, #628	@ (adr r3, 8005150 <__ieee754_rem_pio2+0x2f8>)
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f7fb f976 	bl	80001d0 <__aeabi_dsub>
 8004ee4:	a39c      	add	r3, pc, #624	@ (adr r3, 8005158 <__ieee754_rem_pio2+0x300>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	4606      	mov	r6, r0
 8004eec:	460f      	mov	r7, r1
 8004eee:	f7fb f96f 	bl	80001d0 <__aeabi_dsub>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4680      	mov	r8, r0
 8004ef8:	4689      	mov	r9, r1
 8004efa:	4630      	mov	r0, r6
 8004efc:	4639      	mov	r1, r7
 8004efe:	f7fb f967 	bl	80001d0 <__aeabi_dsub>
 8004f02:	a395      	add	r3, pc, #596	@ (adr r3, 8005158 <__ieee754_rem_pio2+0x300>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	e7dc      	b.n	8004ec4 <__ieee754_rem_pio2+0x6c>
 8004f0a:	f7fb f963 	bl	80001d4 <__adddf3>
 8004f0e:	45a8      	cmp	r8, r5
 8004f10:	4606      	mov	r6, r0
 8004f12:	460f      	mov	r7, r1
 8004f14:	d018      	beq.n	8004f48 <__ieee754_rem_pio2+0xf0>
 8004f16:	a38c      	add	r3, pc, #560	@ (adr r3, 8005148 <__ieee754_rem_pio2+0x2f0>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb f95a 	bl	80001d4 <__adddf3>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4680      	mov	r8, r0
 8004f26:	4689      	mov	r9, r1
 8004f28:	4630      	mov	r0, r6
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7fb f950 	bl	80001d0 <__aeabi_dsub>
 8004f30:	a385      	add	r3, pc, #532	@ (adr r3, 8005148 <__ieee754_rem_pio2+0x2f0>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb f94d 	bl	80001d4 <__adddf3>
 8004f3a:	f04f 35ff 	mov.w	r5, #4294967295
 8004f3e:	e9c4 8900 	strd	r8, r9, [r4]
 8004f42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f46:	e7c4      	b.n	8004ed2 <__ieee754_rem_pio2+0x7a>
 8004f48:	a381      	add	r3, pc, #516	@ (adr r3, 8005150 <__ieee754_rem_pio2+0x2f8>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb f941 	bl	80001d4 <__adddf3>
 8004f52:	a381      	add	r3, pc, #516	@ (adr r3, 8005158 <__ieee754_rem_pio2+0x300>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	4606      	mov	r6, r0
 8004f5a:	460f      	mov	r7, r1
 8004f5c:	f7fb f93a 	bl	80001d4 <__adddf3>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4680      	mov	r8, r0
 8004f66:	4689      	mov	r9, r1
 8004f68:	4630      	mov	r0, r6
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	f7fb f930 	bl	80001d0 <__aeabi_dsub>
 8004f70:	a379      	add	r3, pc, #484	@ (adr r3, 8005158 <__ieee754_rem_pio2+0x300>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	e7de      	b.n	8004f36 <__ieee754_rem_pio2+0xde>
 8004f78:	4b82      	ldr	r3, [pc, #520]	@ (8005184 <__ieee754_rem_pio2+0x32c>)
 8004f7a:	4598      	cmp	r8, r3
 8004f7c:	f200 80d1 	bhi.w	8005122 <__ieee754_rem_pio2+0x2ca>
 8004f80:	f7ff faa2 	bl	80044c8 <fabs>
 8004f84:	ec57 6b10 	vmov	r6, r7, d0
 8004f88:	a375      	add	r3, pc, #468	@ (adr r3, 8005160 <__ieee754_rem_pio2+0x308>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb fad5 	bl	8000540 <__aeabi_dmul>
 8004f96:	4b7c      	ldr	r3, [pc, #496]	@ (8005188 <__ieee754_rem_pio2+0x330>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f7fb f91b 	bl	80001d4 <__adddf3>
 8004f9e:	f7fb fd7f 	bl	8000aa0 <__aeabi_d2iz>
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	f7fb fa62 	bl	800046c <__aeabi_i2d>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fb0:	a363      	add	r3, pc, #396	@ (adr r3, 8005140 <__ieee754_rem_pio2+0x2e8>)
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	f7fb fac3 	bl	8000540 <__aeabi_dmul>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb f905 	bl	80001d0 <__aeabi_dsub>
 8004fc6:	a360      	add	r3, pc, #384	@ (adr r3, 8005148 <__ieee754_rem_pio2+0x2f0>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	4682      	mov	sl, r0
 8004fce:	468b      	mov	fp, r1
 8004fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fd4:	f7fb fab4 	bl	8000540 <__aeabi_dmul>
 8004fd8:	2d1f      	cmp	r5, #31
 8004fda:	4606      	mov	r6, r0
 8004fdc:	460f      	mov	r7, r1
 8004fde:	dc0c      	bgt.n	8004ffa <__ieee754_rem_pio2+0x1a2>
 8004fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800518c <__ieee754_rem_pio2+0x334>)
 8004fe2:	1e6a      	subs	r2, r5, #1
 8004fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe8:	4543      	cmp	r3, r8
 8004fea:	d006      	beq.n	8004ffa <__ieee754_rem_pio2+0x1a2>
 8004fec:	4632      	mov	r2, r6
 8004fee:	463b      	mov	r3, r7
 8004ff0:	4650      	mov	r0, sl
 8004ff2:	4659      	mov	r1, fp
 8004ff4:	f7fb f8ec 	bl	80001d0 <__aeabi_dsub>
 8004ff8:	e00e      	b.n	8005018 <__ieee754_rem_pio2+0x1c0>
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	4650      	mov	r0, sl
 8005000:	4659      	mov	r1, fp
 8005002:	f7fb f8e5 	bl	80001d0 <__aeabi_dsub>
 8005006:	ea4f 5328 	mov.w	r3, r8, asr #20
 800500a:	9305      	str	r3, [sp, #20]
 800500c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005010:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005014:	2b10      	cmp	r3, #16
 8005016:	dc02      	bgt.n	800501e <__ieee754_rem_pio2+0x1c6>
 8005018:	e9c4 0100 	strd	r0, r1, [r4]
 800501c:	e039      	b.n	8005092 <__ieee754_rem_pio2+0x23a>
 800501e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005150 <__ieee754_rem_pio2+0x2f8>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005028:	f7fb fa8a 	bl	8000540 <__aeabi_dmul>
 800502c:	4606      	mov	r6, r0
 800502e:	460f      	mov	r7, r1
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4650      	mov	r0, sl
 8005036:	4659      	mov	r1, fp
 8005038:	f7fb f8ca 	bl	80001d0 <__aeabi_dsub>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4680      	mov	r8, r0
 8005042:	4689      	mov	r9, r1
 8005044:	4650      	mov	r0, sl
 8005046:	4659      	mov	r1, fp
 8005048:	f7fb f8c2 	bl	80001d0 <__aeabi_dsub>
 800504c:	4632      	mov	r2, r6
 800504e:	463b      	mov	r3, r7
 8005050:	f7fb f8be 	bl	80001d0 <__aeabi_dsub>
 8005054:	a340      	add	r3, pc, #256	@ (adr r3, 8005158 <__ieee754_rem_pio2+0x300>)
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	4606      	mov	r6, r0
 800505c:	460f      	mov	r7, r1
 800505e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005062:	f7fb fa6d 	bl	8000540 <__aeabi_dmul>
 8005066:	4632      	mov	r2, r6
 8005068:	463b      	mov	r3, r7
 800506a:	f7fb f8b1 	bl	80001d0 <__aeabi_dsub>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4606      	mov	r6, r0
 8005074:	460f      	mov	r7, r1
 8005076:	4640      	mov	r0, r8
 8005078:	4649      	mov	r1, r9
 800507a:	f7fb f8a9 	bl	80001d0 <__aeabi_dsub>
 800507e:	9a05      	ldr	r2, [sp, #20]
 8005080:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b31      	cmp	r3, #49	@ 0x31
 8005088:	dc20      	bgt.n	80050cc <__ieee754_rem_pio2+0x274>
 800508a:	e9c4 0100 	strd	r0, r1, [r4]
 800508e:	46c2      	mov	sl, r8
 8005090:	46cb      	mov	fp, r9
 8005092:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005096:	4650      	mov	r0, sl
 8005098:	4642      	mov	r2, r8
 800509a:	464b      	mov	r3, r9
 800509c:	4659      	mov	r1, fp
 800509e:	f7fb f897 	bl	80001d0 <__aeabi_dsub>
 80050a2:	463b      	mov	r3, r7
 80050a4:	4632      	mov	r2, r6
 80050a6:	f7fb f893 	bl	80001d0 <__aeabi_dsub>
 80050aa:	9b04      	ldr	r3, [sp, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050b2:	f6bf af0e 	bge.w	8004ed2 <__ieee754_rem_pio2+0x7a>
 80050b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050c0:	f8c4 8000 	str.w	r8, [r4]
 80050c4:	60a0      	str	r0, [r4, #8]
 80050c6:	60e3      	str	r3, [r4, #12]
 80050c8:	426d      	negs	r5, r5
 80050ca:	e702      	b.n	8004ed2 <__ieee754_rem_pio2+0x7a>
 80050cc:	a326      	add	r3, pc, #152	@ (adr r3, 8005168 <__ieee754_rem_pio2+0x310>)
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d6:	f7fb fa33 	bl	8000540 <__aeabi_dmul>
 80050da:	4606      	mov	r6, r0
 80050dc:	460f      	mov	r7, r1
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4640      	mov	r0, r8
 80050e4:	4649      	mov	r1, r9
 80050e6:	f7fb f873 	bl	80001d0 <__aeabi_dsub>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4682      	mov	sl, r0
 80050f0:	468b      	mov	fp, r1
 80050f2:	4640      	mov	r0, r8
 80050f4:	4649      	mov	r1, r9
 80050f6:	f7fb f86b 	bl	80001d0 <__aeabi_dsub>
 80050fa:	4632      	mov	r2, r6
 80050fc:	463b      	mov	r3, r7
 80050fe:	f7fb f867 	bl	80001d0 <__aeabi_dsub>
 8005102:	a31b      	add	r3, pc, #108	@ (adr r3, 8005170 <__ieee754_rem_pio2+0x318>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	4606      	mov	r6, r0
 800510a:	460f      	mov	r7, r1
 800510c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005110:	f7fb fa16 	bl	8000540 <__aeabi_dmul>
 8005114:	4632      	mov	r2, r6
 8005116:	463b      	mov	r3, r7
 8005118:	f7fb f85a 	bl	80001d0 <__aeabi_dsub>
 800511c:	4606      	mov	r6, r0
 800511e:	460f      	mov	r7, r1
 8005120:	e764      	b.n	8004fec <__ieee754_rem_pio2+0x194>
 8005122:	4b1b      	ldr	r3, [pc, #108]	@ (8005190 <__ieee754_rem_pio2+0x338>)
 8005124:	4598      	cmp	r8, r3
 8005126:	d935      	bls.n	8005194 <__ieee754_rem_pio2+0x33c>
 8005128:	4632      	mov	r2, r6
 800512a:	463b      	mov	r3, r7
 800512c:	4630      	mov	r0, r6
 800512e:	4639      	mov	r1, r7
 8005130:	f7fb f84e 	bl	80001d0 <__aeabi_dsub>
 8005134:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005138:	e9c4 0100 	strd	r0, r1, [r4]
 800513c:	e69e      	b.n	8004e7c <__ieee754_rem_pio2+0x24>
 800513e:	bf00      	nop
 8005140:	54400000 	.word	0x54400000
 8005144:	3ff921fb 	.word	0x3ff921fb
 8005148:	1a626331 	.word	0x1a626331
 800514c:	3dd0b461 	.word	0x3dd0b461
 8005150:	1a600000 	.word	0x1a600000
 8005154:	3dd0b461 	.word	0x3dd0b461
 8005158:	2e037073 	.word	0x2e037073
 800515c:	3ba3198a 	.word	0x3ba3198a
 8005160:	6dc9c883 	.word	0x6dc9c883
 8005164:	3fe45f30 	.word	0x3fe45f30
 8005168:	2e000000 	.word	0x2e000000
 800516c:	3ba3198a 	.word	0x3ba3198a
 8005170:	252049c1 	.word	0x252049c1
 8005174:	397b839a 	.word	0x397b839a
 8005178:	3fe921fb 	.word	0x3fe921fb
 800517c:	4002d97b 	.word	0x4002d97b
 8005180:	3ff921fb 	.word	0x3ff921fb
 8005184:	413921fb 	.word	0x413921fb
 8005188:	3fe00000 	.word	0x3fe00000
 800518c:	08005b2c 	.word	0x08005b2c
 8005190:	7fefffff 	.word	0x7fefffff
 8005194:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005198:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800519c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80051a0:	4630      	mov	r0, r6
 80051a2:	460f      	mov	r7, r1
 80051a4:	f7fb fc7c 	bl	8000aa0 <__aeabi_d2iz>
 80051a8:	f7fb f960 	bl	800046c <__aeabi_i2d>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4630      	mov	r0, r6
 80051b2:	4639      	mov	r1, r7
 80051b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051b8:	f7fb f80a 	bl	80001d0 <__aeabi_dsub>
 80051bc:	4b22      	ldr	r3, [pc, #136]	@ (8005248 <__ieee754_rem_pio2+0x3f0>)
 80051be:	2200      	movs	r2, #0
 80051c0:	f7fb f9be 	bl	8000540 <__aeabi_dmul>
 80051c4:	460f      	mov	r7, r1
 80051c6:	4606      	mov	r6, r0
 80051c8:	f7fb fc6a 	bl	8000aa0 <__aeabi_d2iz>
 80051cc:	f7fb f94e 	bl	800046c <__aeabi_i2d>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80051dc:	f7fa fff8 	bl	80001d0 <__aeabi_dsub>
 80051e0:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <__ieee754_rem_pio2+0x3f0>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	f7fb f9ac 	bl	8000540 <__aeabi_dmul>
 80051e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80051ec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80051f0:	f04f 0803 	mov.w	r8, #3
 80051f4:	2600      	movs	r6, #0
 80051f6:	2700      	movs	r7, #0
 80051f8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80051fc:	4632      	mov	r2, r6
 80051fe:	463b      	mov	r3, r7
 8005200:	46c2      	mov	sl, r8
 8005202:	f108 38ff 	add.w	r8, r8, #4294967295
 8005206:	f7fb fc03 	bl	8000a10 <__aeabi_dcmpeq>
 800520a:	2800      	cmp	r0, #0
 800520c:	d1f4      	bne.n	80051f8 <__ieee754_rem_pio2+0x3a0>
 800520e:	4b0f      	ldr	r3, [pc, #60]	@ (800524c <__ieee754_rem_pio2+0x3f4>)
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	2302      	movs	r3, #2
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	462a      	mov	r2, r5
 8005218:	4653      	mov	r3, sl
 800521a:	4621      	mov	r1, r4
 800521c:	a806      	add	r0, sp, #24
 800521e:	f000 f817 	bl	8005250 <__kernel_rem_pio2>
 8005222:	9b04      	ldr	r3, [sp, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	4605      	mov	r5, r0
 8005228:	f6bf ae53 	bge.w	8004ed2 <__ieee754_rem_pio2+0x7a>
 800522c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005230:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005234:	e9c4 2300 	strd	r2, r3, [r4]
 8005238:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800523c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005240:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005244:	e740      	b.n	80050c8 <__ieee754_rem_pio2+0x270>
 8005246:	bf00      	nop
 8005248:	41700000 	.word	0x41700000
 800524c:	08005bac 	.word	0x08005bac

08005250 <__kernel_rem_pio2>:
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	ed2d 8b02 	vpush	{d8}
 8005258:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800525c:	f112 0f14 	cmn.w	r2, #20
 8005260:	9306      	str	r3, [sp, #24]
 8005262:	9104      	str	r1, [sp, #16]
 8005264:	4bbe      	ldr	r3, [pc, #760]	@ (8005560 <__kernel_rem_pio2+0x310>)
 8005266:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005268:	9008      	str	r0, [sp, #32]
 800526a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	9b06      	ldr	r3, [sp, #24]
 8005272:	f103 33ff 	add.w	r3, r3, #4294967295
 8005276:	bfa8      	it	ge
 8005278:	1ed4      	subge	r4, r2, #3
 800527a:	9305      	str	r3, [sp, #20]
 800527c:	bfb2      	itee	lt
 800527e:	2400      	movlt	r4, #0
 8005280:	2318      	movge	r3, #24
 8005282:	fb94 f4f3 	sdivge	r4, r4, r3
 8005286:	f06f 0317 	mvn.w	r3, #23
 800528a:	fb04 3303 	mla	r3, r4, r3, r3
 800528e:	eb03 0b02 	add.w	fp, r3, r2
 8005292:	9b00      	ldr	r3, [sp, #0]
 8005294:	9a05      	ldr	r2, [sp, #20]
 8005296:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005550 <__kernel_rem_pio2+0x300>
 800529a:	eb03 0802 	add.w	r8, r3, r2
 800529e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80052a0:	1aa7      	subs	r7, r4, r2
 80052a2:	ae20      	add	r6, sp, #128	@ 0x80
 80052a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80052a8:	2500      	movs	r5, #0
 80052aa:	4545      	cmp	r5, r8
 80052ac:	dd13      	ble.n	80052d6 <__kernel_rem_pio2+0x86>
 80052ae:	9b06      	ldr	r3, [sp, #24]
 80052b0:	aa20      	add	r2, sp, #128	@ 0x80
 80052b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80052b6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80052ba:	f04f 0800 	mov.w	r8, #0
 80052be:	9b00      	ldr	r3, [sp, #0]
 80052c0:	4598      	cmp	r8, r3
 80052c2:	dc31      	bgt.n	8005328 <__kernel_rem_pio2+0xd8>
 80052c4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005550 <__kernel_rem_pio2+0x300>
 80052c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052d0:	462f      	mov	r7, r5
 80052d2:	2600      	movs	r6, #0
 80052d4:	e01b      	b.n	800530e <__kernel_rem_pio2+0xbe>
 80052d6:	42ef      	cmn	r7, r5
 80052d8:	d407      	bmi.n	80052ea <__kernel_rem_pio2+0x9a>
 80052da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80052de:	f7fb f8c5 	bl	800046c <__aeabi_i2d>
 80052e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80052e6:	3501      	adds	r5, #1
 80052e8:	e7df      	b.n	80052aa <__kernel_rem_pio2+0x5a>
 80052ea:	ec51 0b18 	vmov	r0, r1, d8
 80052ee:	e7f8      	b.n	80052e2 <__kernel_rem_pio2+0x92>
 80052f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80052f8:	f7fb f922 	bl	8000540 <__aeabi_dmul>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005304:	f7fa ff66 	bl	80001d4 <__adddf3>
 8005308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800530c:	3601      	adds	r6, #1
 800530e:	9b05      	ldr	r3, [sp, #20]
 8005310:	429e      	cmp	r6, r3
 8005312:	f1a7 0708 	sub.w	r7, r7, #8
 8005316:	ddeb      	ble.n	80052f0 <__kernel_rem_pio2+0xa0>
 8005318:	ed9d 7b02 	vldr	d7, [sp, #8]
 800531c:	f108 0801 	add.w	r8, r8, #1
 8005320:	ecaa 7b02 	vstmia	sl!, {d7}
 8005324:	3508      	adds	r5, #8
 8005326:	e7ca      	b.n	80052be <__kernel_rem_pio2+0x6e>
 8005328:	9b00      	ldr	r3, [sp, #0]
 800532a:	f8dd 8000 	ldr.w	r8, [sp]
 800532e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005330:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005334:	930a      	str	r3, [sp, #40]	@ 0x28
 8005336:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005338:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800533c:	9309      	str	r3, [sp, #36]	@ 0x24
 800533e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005342:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005344:	ab98      	add	r3, sp, #608	@ 0x260
 8005346:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800534a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800534e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005352:	ac0c      	add	r4, sp, #48	@ 0x30
 8005354:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005356:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800535a:	46a1      	mov	r9, r4
 800535c:	46c2      	mov	sl, r8
 800535e:	f1ba 0f00 	cmp.w	sl, #0
 8005362:	f1a5 0508 	sub.w	r5, r5, #8
 8005366:	dc77      	bgt.n	8005458 <__kernel_rem_pio2+0x208>
 8005368:	4658      	mov	r0, fp
 800536a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800536e:	f000 fac7 	bl	8005900 <scalbn>
 8005372:	ec57 6b10 	vmov	r6, r7, d0
 8005376:	2200      	movs	r2, #0
 8005378:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800537c:	4630      	mov	r0, r6
 800537e:	4639      	mov	r1, r7
 8005380:	f7fb f8de 	bl	8000540 <__aeabi_dmul>
 8005384:	ec41 0b10 	vmov	d0, r0, r1
 8005388:	f000 fb3a 	bl	8005a00 <floor>
 800538c:	4b75      	ldr	r3, [pc, #468]	@ (8005564 <__kernel_rem_pio2+0x314>)
 800538e:	ec51 0b10 	vmov	r0, r1, d0
 8005392:	2200      	movs	r2, #0
 8005394:	f7fb f8d4 	bl	8000540 <__aeabi_dmul>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	f7fa ff16 	bl	80001d0 <__aeabi_dsub>
 80053a4:	460f      	mov	r7, r1
 80053a6:	4606      	mov	r6, r0
 80053a8:	f7fb fb7a 	bl	8000aa0 <__aeabi_d2iz>
 80053ac:	9002      	str	r0, [sp, #8]
 80053ae:	f7fb f85d 	bl	800046c <__aeabi_i2d>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4630      	mov	r0, r6
 80053b8:	4639      	mov	r1, r7
 80053ba:	f7fa ff09 	bl	80001d0 <__aeabi_dsub>
 80053be:	f1bb 0f00 	cmp.w	fp, #0
 80053c2:	4606      	mov	r6, r0
 80053c4:	460f      	mov	r7, r1
 80053c6:	dd6c      	ble.n	80054a2 <__kernel_rem_pio2+0x252>
 80053c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80053cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80053ce:	9d02      	ldr	r5, [sp, #8]
 80053d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80053d4:	f1cb 0018 	rsb	r0, fp, #24
 80053d8:	fa43 f200 	asr.w	r2, r3, r0
 80053dc:	4415      	add	r5, r2
 80053de:	4082      	lsls	r2, r0
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	aa0c      	add	r2, sp, #48	@ 0x30
 80053e4:	9502      	str	r5, [sp, #8]
 80053e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80053ea:	f1cb 0217 	rsb	r2, fp, #23
 80053ee:	fa43 f902 	asr.w	r9, r3, r2
 80053f2:	f1b9 0f00 	cmp.w	r9, #0
 80053f6:	dd64      	ble.n	80054c2 <__kernel_rem_pio2+0x272>
 80053f8:	9b02      	ldr	r3, [sp, #8]
 80053fa:	2200      	movs	r2, #0
 80053fc:	3301      	adds	r3, #1
 80053fe:	9302      	str	r3, [sp, #8]
 8005400:	4615      	mov	r5, r2
 8005402:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005406:	4590      	cmp	r8, r2
 8005408:	f300 80b8 	bgt.w	800557c <__kernel_rem_pio2+0x32c>
 800540c:	f1bb 0f00 	cmp.w	fp, #0
 8005410:	dd07      	ble.n	8005422 <__kernel_rem_pio2+0x1d2>
 8005412:	f1bb 0f01 	cmp.w	fp, #1
 8005416:	f000 80bf 	beq.w	8005598 <__kernel_rem_pio2+0x348>
 800541a:	f1bb 0f02 	cmp.w	fp, #2
 800541e:	f000 80c6 	beq.w	80055ae <__kernel_rem_pio2+0x35e>
 8005422:	f1b9 0f02 	cmp.w	r9, #2
 8005426:	d14c      	bne.n	80054c2 <__kernel_rem_pio2+0x272>
 8005428:	4632      	mov	r2, r6
 800542a:	463b      	mov	r3, r7
 800542c:	494e      	ldr	r1, [pc, #312]	@ (8005568 <__kernel_rem_pio2+0x318>)
 800542e:	2000      	movs	r0, #0
 8005430:	f7fa fece 	bl	80001d0 <__aeabi_dsub>
 8005434:	4606      	mov	r6, r0
 8005436:	460f      	mov	r7, r1
 8005438:	2d00      	cmp	r5, #0
 800543a:	d042      	beq.n	80054c2 <__kernel_rem_pio2+0x272>
 800543c:	4658      	mov	r0, fp
 800543e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005558 <__kernel_rem_pio2+0x308>
 8005442:	f000 fa5d 	bl	8005900 <scalbn>
 8005446:	4630      	mov	r0, r6
 8005448:	4639      	mov	r1, r7
 800544a:	ec53 2b10 	vmov	r2, r3, d0
 800544e:	f7fa febf 	bl	80001d0 <__aeabi_dsub>
 8005452:	4606      	mov	r6, r0
 8005454:	460f      	mov	r7, r1
 8005456:	e034      	b.n	80054c2 <__kernel_rem_pio2+0x272>
 8005458:	4b44      	ldr	r3, [pc, #272]	@ (800556c <__kernel_rem_pio2+0x31c>)
 800545a:	2200      	movs	r2, #0
 800545c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005460:	f7fb f86e 	bl	8000540 <__aeabi_dmul>
 8005464:	f7fb fb1c 	bl	8000aa0 <__aeabi_d2iz>
 8005468:	f7fb f800 	bl	800046c <__aeabi_i2d>
 800546c:	4b40      	ldr	r3, [pc, #256]	@ (8005570 <__kernel_rem_pio2+0x320>)
 800546e:	2200      	movs	r2, #0
 8005470:	4606      	mov	r6, r0
 8005472:	460f      	mov	r7, r1
 8005474:	f7fb f864 	bl	8000540 <__aeabi_dmul>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005480:	f7fa fea6 	bl	80001d0 <__aeabi_dsub>
 8005484:	f7fb fb0c 	bl	8000aa0 <__aeabi_d2iz>
 8005488:	e9d5 2300 	ldrd	r2, r3, [r5]
 800548c:	f849 0b04 	str.w	r0, [r9], #4
 8005490:	4639      	mov	r1, r7
 8005492:	4630      	mov	r0, r6
 8005494:	f7fa fe9e 	bl	80001d4 <__adddf3>
 8005498:	f10a 3aff 	add.w	sl, sl, #4294967295
 800549c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054a0:	e75d      	b.n	800535e <__kernel_rem_pio2+0x10e>
 80054a2:	d107      	bne.n	80054b4 <__kernel_rem_pio2+0x264>
 80054a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80054a8:	aa0c      	add	r2, sp, #48	@ 0x30
 80054aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80054b2:	e79e      	b.n	80053f2 <__kernel_rem_pio2+0x1a2>
 80054b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005574 <__kernel_rem_pio2+0x324>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	f7fb fac8 	bl	8000a4c <__aeabi_dcmpge>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d143      	bne.n	8005548 <__kernel_rem_pio2+0x2f8>
 80054c0:	4681      	mov	r9, r0
 80054c2:	2200      	movs	r2, #0
 80054c4:	2300      	movs	r3, #0
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fb faa1 	bl	8000a10 <__aeabi_dcmpeq>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f000 80bf 	beq.w	8005652 <__kernel_rem_pio2+0x402>
 80054d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80054d8:	2200      	movs	r2, #0
 80054da:	9900      	ldr	r1, [sp, #0]
 80054dc:	428b      	cmp	r3, r1
 80054de:	da6e      	bge.n	80055be <__kernel_rem_pio2+0x36e>
 80054e0:	2a00      	cmp	r2, #0
 80054e2:	f000 8089 	beq.w	80055f8 <__kernel_rem_pio2+0x3a8>
 80054e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80054ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80054ec:	f1ab 0b18 	sub.w	fp, fp, #24
 80054f0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f6      	beq.n	80054e6 <__kernel_rem_pio2+0x296>
 80054f8:	4658      	mov	r0, fp
 80054fa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005558 <__kernel_rem_pio2+0x308>
 80054fe:	f000 f9ff 	bl	8005900 <scalbn>
 8005502:	f108 0301 	add.w	r3, r8, #1
 8005506:	00da      	lsls	r2, r3, #3
 8005508:	9205      	str	r2, [sp, #20]
 800550a:	ec55 4b10 	vmov	r4, r5, d0
 800550e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005510:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800556c <__kernel_rem_pio2+0x31c>
 8005514:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005518:	4646      	mov	r6, r8
 800551a:	f04f 0a00 	mov.w	sl, #0
 800551e:	2e00      	cmp	r6, #0
 8005520:	f280 80cf 	bge.w	80056c2 <__kernel_rem_pio2+0x472>
 8005524:	4644      	mov	r4, r8
 8005526:	2c00      	cmp	r4, #0
 8005528:	f2c0 80fd 	blt.w	8005726 <__kernel_rem_pio2+0x4d6>
 800552c:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <__kernel_rem_pio2+0x328>)
 800552e:	461f      	mov	r7, r3
 8005530:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005536:	9306      	str	r3, [sp, #24]
 8005538:	f04f 0a00 	mov.w	sl, #0
 800553c:	f04f 0b00 	mov.w	fp, #0
 8005540:	2600      	movs	r6, #0
 8005542:	eba8 0504 	sub.w	r5, r8, r4
 8005546:	e0e2      	b.n	800570e <__kernel_rem_pio2+0x4be>
 8005548:	f04f 0902 	mov.w	r9, #2
 800554c:	e754      	b.n	80053f8 <__kernel_rem_pio2+0x1a8>
 800554e:	bf00      	nop
	...
 800555c:	3ff00000 	.word	0x3ff00000
 8005560:	08005cf8 	.word	0x08005cf8
 8005564:	40200000 	.word	0x40200000
 8005568:	3ff00000 	.word	0x3ff00000
 800556c:	3e700000 	.word	0x3e700000
 8005570:	41700000 	.word	0x41700000
 8005574:	3fe00000 	.word	0x3fe00000
 8005578:	08005cb8 	.word	0x08005cb8
 800557c:	f854 3b04 	ldr.w	r3, [r4], #4
 8005580:	b945      	cbnz	r5, 8005594 <__kernel_rem_pio2+0x344>
 8005582:	b123      	cbz	r3, 800558e <__kernel_rem_pio2+0x33e>
 8005584:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005588:	f844 3c04 	str.w	r3, [r4, #-4]
 800558c:	2301      	movs	r3, #1
 800558e:	3201      	adds	r2, #1
 8005590:	461d      	mov	r5, r3
 8005592:	e738      	b.n	8005406 <__kernel_rem_pio2+0x1b6>
 8005594:	1acb      	subs	r3, r1, r3
 8005596:	e7f7      	b.n	8005588 <__kernel_rem_pio2+0x338>
 8005598:	f108 32ff 	add.w	r2, r8, #4294967295
 800559c:	ab0c      	add	r3, sp, #48	@ 0x30
 800559e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80055a6:	a90c      	add	r1, sp, #48	@ 0x30
 80055a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80055ac:	e739      	b.n	8005422 <__kernel_rem_pio2+0x1d2>
 80055ae:	f108 32ff 	add.w	r2, r8, #4294967295
 80055b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80055b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80055bc:	e7f3      	b.n	80055a6 <__kernel_rem_pio2+0x356>
 80055be:	a90c      	add	r1, sp, #48	@ 0x30
 80055c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	430a      	orrs	r2, r1
 80055c8:	e787      	b.n	80054da <__kernel_rem_pio2+0x28a>
 80055ca:	3401      	adds	r4, #1
 80055cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80055d0:	2a00      	cmp	r2, #0
 80055d2:	d0fa      	beq.n	80055ca <__kernel_rem_pio2+0x37a>
 80055d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80055da:	eb0d 0503 	add.w	r5, sp, r3
 80055de:	9b06      	ldr	r3, [sp, #24]
 80055e0:	aa20      	add	r2, sp, #128	@ 0x80
 80055e2:	4443      	add	r3, r8
 80055e4:	f108 0701 	add.w	r7, r8, #1
 80055e8:	3d98      	subs	r5, #152	@ 0x98
 80055ea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80055ee:	4444      	add	r4, r8
 80055f0:	42bc      	cmp	r4, r7
 80055f2:	da04      	bge.n	80055fe <__kernel_rem_pio2+0x3ae>
 80055f4:	46a0      	mov	r8, r4
 80055f6:	e6a2      	b.n	800533e <__kernel_rem_pio2+0xee>
 80055f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055fa:	2401      	movs	r4, #1
 80055fc:	e7e6      	b.n	80055cc <__kernel_rem_pio2+0x37c>
 80055fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005600:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005604:	f7fa ff32 	bl	800046c <__aeabi_i2d>
 8005608:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80058d0 <__kernel_rem_pio2+0x680>
 800560c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005610:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005618:	46b2      	mov	sl, r6
 800561a:	f04f 0800 	mov.w	r8, #0
 800561e:	9b05      	ldr	r3, [sp, #20]
 8005620:	4598      	cmp	r8, r3
 8005622:	dd05      	ble.n	8005630 <__kernel_rem_pio2+0x3e0>
 8005624:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005628:	3701      	adds	r7, #1
 800562a:	eca5 7b02 	vstmia	r5!, {d7}
 800562e:	e7df      	b.n	80055f0 <__kernel_rem_pio2+0x3a0>
 8005630:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005634:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005638:	f7fa ff82 	bl	8000540 <__aeabi_dmul>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005644:	f7fa fdc6 	bl	80001d4 <__adddf3>
 8005648:	f108 0801 	add.w	r8, r8, #1
 800564c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005650:	e7e5      	b.n	800561e <__kernel_rem_pio2+0x3ce>
 8005652:	f1cb 0000 	rsb	r0, fp, #0
 8005656:	ec47 6b10 	vmov	d0, r6, r7
 800565a:	f000 f951 	bl	8005900 <scalbn>
 800565e:	ec55 4b10 	vmov	r4, r5, d0
 8005662:	4b9d      	ldr	r3, [pc, #628]	@ (80058d8 <__kernel_rem_pio2+0x688>)
 8005664:	2200      	movs	r2, #0
 8005666:	4620      	mov	r0, r4
 8005668:	4629      	mov	r1, r5
 800566a:	f7fb f9ef 	bl	8000a4c <__aeabi_dcmpge>
 800566e:	b300      	cbz	r0, 80056b2 <__kernel_rem_pio2+0x462>
 8005670:	4b9a      	ldr	r3, [pc, #616]	@ (80058dc <__kernel_rem_pio2+0x68c>)
 8005672:	2200      	movs	r2, #0
 8005674:	4620      	mov	r0, r4
 8005676:	4629      	mov	r1, r5
 8005678:	f7fa ff62 	bl	8000540 <__aeabi_dmul>
 800567c:	f7fb fa10 	bl	8000aa0 <__aeabi_d2iz>
 8005680:	4606      	mov	r6, r0
 8005682:	f7fa fef3 	bl	800046c <__aeabi_i2d>
 8005686:	4b94      	ldr	r3, [pc, #592]	@ (80058d8 <__kernel_rem_pio2+0x688>)
 8005688:	2200      	movs	r2, #0
 800568a:	f7fa ff59 	bl	8000540 <__aeabi_dmul>
 800568e:	460b      	mov	r3, r1
 8005690:	4602      	mov	r2, r0
 8005692:	4629      	mov	r1, r5
 8005694:	4620      	mov	r0, r4
 8005696:	f7fa fd9b 	bl	80001d0 <__aeabi_dsub>
 800569a:	f7fb fa01 	bl	8000aa0 <__aeabi_d2iz>
 800569e:	ab0c      	add	r3, sp, #48	@ 0x30
 80056a0:	f10b 0b18 	add.w	fp, fp, #24
 80056a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80056a8:	f108 0801 	add.w	r8, r8, #1
 80056ac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80056b0:	e722      	b.n	80054f8 <__kernel_rem_pio2+0x2a8>
 80056b2:	4620      	mov	r0, r4
 80056b4:	4629      	mov	r1, r5
 80056b6:	f7fb f9f3 	bl	8000aa0 <__aeabi_d2iz>
 80056ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80056bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80056c0:	e71a      	b.n	80054f8 <__kernel_rem_pio2+0x2a8>
 80056c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80056c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056c8:	f7fa fed0 	bl	800046c <__aeabi_i2d>
 80056cc:	4622      	mov	r2, r4
 80056ce:	462b      	mov	r3, r5
 80056d0:	f7fa ff36 	bl	8000540 <__aeabi_dmul>
 80056d4:	4652      	mov	r2, sl
 80056d6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80056da:	465b      	mov	r3, fp
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa ff2e 	bl	8000540 <__aeabi_dmul>
 80056e4:	3e01      	subs	r6, #1
 80056e6:	4604      	mov	r4, r0
 80056e8:	460d      	mov	r5, r1
 80056ea:	e718      	b.n	800551e <__kernel_rem_pio2+0x2ce>
 80056ec:	9906      	ldr	r1, [sp, #24]
 80056ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80056f2:	9106      	str	r1, [sp, #24]
 80056f4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80056f8:	f7fa ff22 	bl	8000540 <__aeabi_dmul>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4650      	mov	r0, sl
 8005702:	4659      	mov	r1, fp
 8005704:	f7fa fd66 	bl	80001d4 <__adddf3>
 8005708:	3601      	adds	r6, #1
 800570a:	4682      	mov	sl, r0
 800570c:	468b      	mov	fp, r1
 800570e:	9b00      	ldr	r3, [sp, #0]
 8005710:	429e      	cmp	r6, r3
 8005712:	dc01      	bgt.n	8005718 <__kernel_rem_pio2+0x4c8>
 8005714:	42b5      	cmp	r5, r6
 8005716:	dae9      	bge.n	80056ec <__kernel_rem_pio2+0x49c>
 8005718:	ab48      	add	r3, sp, #288	@ 0x120
 800571a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800571e:	e9c5 ab00 	strd	sl, fp, [r5]
 8005722:	3c01      	subs	r4, #1
 8005724:	e6ff      	b.n	8005526 <__kernel_rem_pio2+0x2d6>
 8005726:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005728:	2b02      	cmp	r3, #2
 800572a:	dc0b      	bgt.n	8005744 <__kernel_rem_pio2+0x4f4>
 800572c:	2b00      	cmp	r3, #0
 800572e:	dc39      	bgt.n	80057a4 <__kernel_rem_pio2+0x554>
 8005730:	d05d      	beq.n	80057ee <__kernel_rem_pio2+0x59e>
 8005732:	9b02      	ldr	r3, [sp, #8]
 8005734:	f003 0007 	and.w	r0, r3, #7
 8005738:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800573c:	ecbd 8b02 	vpop	{d8}
 8005740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005744:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005746:	2b03      	cmp	r3, #3
 8005748:	d1f3      	bne.n	8005732 <__kernel_rem_pio2+0x4e2>
 800574a:	9b05      	ldr	r3, [sp, #20]
 800574c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005750:	eb0d 0403 	add.w	r4, sp, r3
 8005754:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005758:	4625      	mov	r5, r4
 800575a:	46c2      	mov	sl, r8
 800575c:	f1ba 0f00 	cmp.w	sl, #0
 8005760:	f1a5 0508 	sub.w	r5, r5, #8
 8005764:	dc6b      	bgt.n	800583e <__kernel_rem_pio2+0x5ee>
 8005766:	4645      	mov	r5, r8
 8005768:	2d01      	cmp	r5, #1
 800576a:	f1a4 0408 	sub.w	r4, r4, #8
 800576e:	f300 8087 	bgt.w	8005880 <__kernel_rem_pio2+0x630>
 8005772:	9c05      	ldr	r4, [sp, #20]
 8005774:	ab48      	add	r3, sp, #288	@ 0x120
 8005776:	441c      	add	r4, r3
 8005778:	2000      	movs	r0, #0
 800577a:	2100      	movs	r1, #0
 800577c:	f1b8 0f01 	cmp.w	r8, #1
 8005780:	f300 809c 	bgt.w	80058bc <__kernel_rem_pio2+0x66c>
 8005784:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005788:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	f040 80a6 	bne.w	80058e0 <__kernel_rem_pio2+0x690>
 8005794:	9b04      	ldr	r3, [sp, #16]
 8005796:	e9c3 7800 	strd	r7, r8, [r3]
 800579a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800579e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80057a2:	e7c6      	b.n	8005732 <__kernel_rem_pio2+0x4e2>
 80057a4:	9d05      	ldr	r5, [sp, #20]
 80057a6:	ab48      	add	r3, sp, #288	@ 0x120
 80057a8:	441d      	add	r5, r3
 80057aa:	4644      	mov	r4, r8
 80057ac:	2000      	movs	r0, #0
 80057ae:	2100      	movs	r1, #0
 80057b0:	2c00      	cmp	r4, #0
 80057b2:	da35      	bge.n	8005820 <__kernel_rem_pio2+0x5d0>
 80057b4:	f1b9 0f00 	cmp.w	r9, #0
 80057b8:	d038      	beq.n	800582c <__kernel_rem_pio2+0x5dc>
 80057ba:	4602      	mov	r2, r0
 80057bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057c0:	9c04      	ldr	r4, [sp, #16]
 80057c2:	e9c4 2300 	strd	r2, r3, [r4]
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80057ce:	f7fa fcff 	bl	80001d0 <__aeabi_dsub>
 80057d2:	ad4a      	add	r5, sp, #296	@ 0x128
 80057d4:	2401      	movs	r4, #1
 80057d6:	45a0      	cmp	r8, r4
 80057d8:	da2b      	bge.n	8005832 <__kernel_rem_pio2+0x5e2>
 80057da:	f1b9 0f00 	cmp.w	r9, #0
 80057de:	d002      	beq.n	80057e6 <__kernel_rem_pio2+0x596>
 80057e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057e4:	4619      	mov	r1, r3
 80057e6:	9b04      	ldr	r3, [sp, #16]
 80057e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80057ec:	e7a1      	b.n	8005732 <__kernel_rem_pio2+0x4e2>
 80057ee:	9c05      	ldr	r4, [sp, #20]
 80057f0:	ab48      	add	r3, sp, #288	@ 0x120
 80057f2:	441c      	add	r4, r3
 80057f4:	2000      	movs	r0, #0
 80057f6:	2100      	movs	r1, #0
 80057f8:	f1b8 0f00 	cmp.w	r8, #0
 80057fc:	da09      	bge.n	8005812 <__kernel_rem_pio2+0x5c2>
 80057fe:	f1b9 0f00 	cmp.w	r9, #0
 8005802:	d002      	beq.n	800580a <__kernel_rem_pio2+0x5ba>
 8005804:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005808:	4619      	mov	r1, r3
 800580a:	9b04      	ldr	r3, [sp, #16]
 800580c:	e9c3 0100 	strd	r0, r1, [r3]
 8005810:	e78f      	b.n	8005732 <__kernel_rem_pio2+0x4e2>
 8005812:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005816:	f7fa fcdd 	bl	80001d4 <__adddf3>
 800581a:	f108 38ff 	add.w	r8, r8, #4294967295
 800581e:	e7eb      	b.n	80057f8 <__kernel_rem_pio2+0x5a8>
 8005820:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005824:	f7fa fcd6 	bl	80001d4 <__adddf3>
 8005828:	3c01      	subs	r4, #1
 800582a:	e7c1      	b.n	80057b0 <__kernel_rem_pio2+0x560>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	e7c6      	b.n	80057c0 <__kernel_rem_pio2+0x570>
 8005832:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005836:	f7fa fccd 	bl	80001d4 <__adddf3>
 800583a:	3401      	adds	r4, #1
 800583c:	e7cb      	b.n	80057d6 <__kernel_rem_pio2+0x586>
 800583e:	ed95 7b00 	vldr	d7, [r5]
 8005842:	ed8d 7b00 	vstr	d7, [sp]
 8005846:	ed95 7b02 	vldr	d7, [r5, #8]
 800584a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800584e:	ec53 2b17 	vmov	r2, r3, d7
 8005852:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005856:	f7fa fcbd 	bl	80001d4 <__adddf3>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4606      	mov	r6, r0
 8005860:	460f      	mov	r7, r1
 8005862:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005866:	f7fa fcb3 	bl	80001d0 <__aeabi_dsub>
 800586a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800586e:	f7fa fcb1 	bl	80001d4 <__adddf3>
 8005872:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005876:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800587a:	e9c5 6700 	strd	r6, r7, [r5]
 800587e:	e76d      	b.n	800575c <__kernel_rem_pio2+0x50c>
 8005880:	ed94 7b00 	vldr	d7, [r4]
 8005884:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005888:	ec51 0b17 	vmov	r0, r1, d7
 800588c:	4652      	mov	r2, sl
 800588e:	465b      	mov	r3, fp
 8005890:	ed8d 7b00 	vstr	d7, [sp]
 8005894:	f7fa fc9e 	bl	80001d4 <__adddf3>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4606      	mov	r6, r0
 800589e:	460f      	mov	r7, r1
 80058a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058a4:	f7fa fc94 	bl	80001d0 <__aeabi_dsub>
 80058a8:	4652      	mov	r2, sl
 80058aa:	465b      	mov	r3, fp
 80058ac:	f7fa fc92 	bl	80001d4 <__adddf3>
 80058b0:	3d01      	subs	r5, #1
 80058b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058b6:	e9c4 6700 	strd	r6, r7, [r4]
 80058ba:	e755      	b.n	8005768 <__kernel_rem_pio2+0x518>
 80058bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058c0:	f7fa fc88 	bl	80001d4 <__adddf3>
 80058c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80058c8:	e758      	b.n	800577c <__kernel_rem_pio2+0x52c>
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w
	...
 80058d8:	41700000 	.word	0x41700000
 80058dc:	3e700000 	.word	0x3e700000
 80058e0:	9b04      	ldr	r3, [sp, #16]
 80058e2:	9a04      	ldr	r2, [sp, #16]
 80058e4:	601f      	str	r7, [r3, #0]
 80058e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80058ea:	605c      	str	r4, [r3, #4]
 80058ec:	609d      	str	r5, [r3, #8]
 80058ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80058f2:	60d3      	str	r3, [r2, #12]
 80058f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80058f8:	6110      	str	r0, [r2, #16]
 80058fa:	6153      	str	r3, [r2, #20]
 80058fc:	e719      	b.n	8005732 <__kernel_rem_pio2+0x4e2>
 80058fe:	bf00      	nop

08005900 <scalbn>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	ec55 4b10 	vmov	r4, r5, d0
 8005906:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800590a:	4606      	mov	r6, r0
 800590c:	462b      	mov	r3, r5
 800590e:	b991      	cbnz	r1, 8005936 <scalbn+0x36>
 8005910:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005914:	4323      	orrs	r3, r4
 8005916:	d03d      	beq.n	8005994 <scalbn+0x94>
 8005918:	4b35      	ldr	r3, [pc, #212]	@ (80059f0 <scalbn+0xf0>)
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	2200      	movs	r2, #0
 8005920:	f7fa fe0e 	bl	8000540 <__aeabi_dmul>
 8005924:	4b33      	ldr	r3, [pc, #204]	@ (80059f4 <scalbn+0xf4>)
 8005926:	429e      	cmp	r6, r3
 8005928:	4604      	mov	r4, r0
 800592a:	460d      	mov	r5, r1
 800592c:	da0f      	bge.n	800594e <scalbn+0x4e>
 800592e:	a328      	add	r3, pc, #160	@ (adr r3, 80059d0 <scalbn+0xd0>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	e01e      	b.n	8005974 <scalbn+0x74>
 8005936:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800593a:	4291      	cmp	r1, r2
 800593c:	d10b      	bne.n	8005956 <scalbn+0x56>
 800593e:	4622      	mov	r2, r4
 8005940:	4620      	mov	r0, r4
 8005942:	4629      	mov	r1, r5
 8005944:	f7fa fc46 	bl	80001d4 <__adddf3>
 8005948:	4604      	mov	r4, r0
 800594a:	460d      	mov	r5, r1
 800594c:	e022      	b.n	8005994 <scalbn+0x94>
 800594e:	460b      	mov	r3, r1
 8005950:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005954:	3936      	subs	r1, #54	@ 0x36
 8005956:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800595a:	4296      	cmp	r6, r2
 800595c:	dd0d      	ble.n	800597a <scalbn+0x7a>
 800595e:	2d00      	cmp	r5, #0
 8005960:	a11d      	add	r1, pc, #116	@ (adr r1, 80059d8 <scalbn+0xd8>)
 8005962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005966:	da02      	bge.n	800596e <scalbn+0x6e>
 8005968:	a11d      	add	r1, pc, #116	@ (adr r1, 80059e0 <scalbn+0xe0>)
 800596a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800596e:	a31a      	add	r3, pc, #104	@ (adr r3, 80059d8 <scalbn+0xd8>)
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f7fa fde4 	bl	8000540 <__aeabi_dmul>
 8005978:	e7e6      	b.n	8005948 <scalbn+0x48>
 800597a:	1872      	adds	r2, r6, r1
 800597c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005980:	428a      	cmp	r2, r1
 8005982:	dcec      	bgt.n	800595e <scalbn+0x5e>
 8005984:	2a00      	cmp	r2, #0
 8005986:	dd08      	ble.n	800599a <scalbn+0x9a>
 8005988:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800598c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005990:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005994:	ec45 4b10 	vmov	d0, r4, r5
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800599e:	da08      	bge.n	80059b2 <scalbn+0xb2>
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	a10b      	add	r1, pc, #44	@ (adr r1, 80059d0 <scalbn+0xd0>)
 80059a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059a8:	dac1      	bge.n	800592e <scalbn+0x2e>
 80059aa:	a10f      	add	r1, pc, #60	@ (adr r1, 80059e8 <scalbn+0xe8>)
 80059ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059b0:	e7bd      	b.n	800592e <scalbn+0x2e>
 80059b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80059b6:	3236      	adds	r2, #54	@ 0x36
 80059b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80059bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80059c0:	4620      	mov	r0, r4
 80059c2:	4b0d      	ldr	r3, [pc, #52]	@ (80059f8 <scalbn+0xf8>)
 80059c4:	4629      	mov	r1, r5
 80059c6:	2200      	movs	r2, #0
 80059c8:	e7d4      	b.n	8005974 <scalbn+0x74>
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w
 80059d0:	c2f8f359 	.word	0xc2f8f359
 80059d4:	01a56e1f 	.word	0x01a56e1f
 80059d8:	8800759c 	.word	0x8800759c
 80059dc:	7e37e43c 	.word	0x7e37e43c
 80059e0:	8800759c 	.word	0x8800759c
 80059e4:	fe37e43c 	.word	0xfe37e43c
 80059e8:	c2f8f359 	.word	0xc2f8f359
 80059ec:	81a56e1f 	.word	0x81a56e1f
 80059f0:	43500000 	.word	0x43500000
 80059f4:	ffff3cb0 	.word	0xffff3cb0
 80059f8:	3c900000 	.word	0x3c900000
 80059fc:	00000000 	.word	0x00000000

08005a00 <floor>:
 8005a00:	ec51 0b10 	vmov	r0, r1, d0
 8005a04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005a10:	2e13      	cmp	r6, #19
 8005a12:	460c      	mov	r4, r1
 8005a14:	4605      	mov	r5, r0
 8005a16:	4680      	mov	r8, r0
 8005a18:	dc34      	bgt.n	8005a84 <floor+0x84>
 8005a1a:	2e00      	cmp	r6, #0
 8005a1c:	da17      	bge.n	8005a4e <floor+0x4e>
 8005a1e:	a332      	add	r3, pc, #200	@ (adr r3, 8005ae8 <floor+0xe8>)
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f7fa fbd6 	bl	80001d4 <__adddf3>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f7fb f818 	bl	8000a60 <__aeabi_dcmpgt>
 8005a30:	b150      	cbz	r0, 8005a48 <floor+0x48>
 8005a32:	2c00      	cmp	r4, #0
 8005a34:	da55      	bge.n	8005ae2 <floor+0xe2>
 8005a36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005a3a:	432c      	orrs	r4, r5
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	42ac      	cmp	r4, r5
 8005a40:	4c2b      	ldr	r4, [pc, #172]	@ (8005af0 <floor+0xf0>)
 8005a42:	bf08      	it	eq
 8005a44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	e023      	b.n	8005a96 <floor+0x96>
 8005a4e:	4f29      	ldr	r7, [pc, #164]	@ (8005af4 <floor+0xf4>)
 8005a50:	4137      	asrs	r7, r6
 8005a52:	ea01 0307 	and.w	r3, r1, r7
 8005a56:	4303      	orrs	r3, r0
 8005a58:	d01d      	beq.n	8005a96 <floor+0x96>
 8005a5a:	a323      	add	r3, pc, #140	@ (adr r3, 8005ae8 <floor+0xe8>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fbb8 	bl	80001d4 <__adddf3>
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	f7fa fffa 	bl	8000a60 <__aeabi_dcmpgt>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d0eb      	beq.n	8005a48 <floor+0x48>
 8005a70:	2c00      	cmp	r4, #0
 8005a72:	bfbe      	ittt	lt
 8005a74:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005a78:	4133      	asrlt	r3, r6
 8005a7a:	18e4      	addlt	r4, r4, r3
 8005a7c:	ea24 0407 	bic.w	r4, r4, r7
 8005a80:	2500      	movs	r5, #0
 8005a82:	e7e1      	b.n	8005a48 <floor+0x48>
 8005a84:	2e33      	cmp	r6, #51	@ 0x33
 8005a86:	dd0a      	ble.n	8005a9e <floor+0x9e>
 8005a88:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005a8c:	d103      	bne.n	8005a96 <floor+0x96>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	f7fa fb9f 	bl	80001d4 <__adddf3>
 8005a96:	ec41 0b10 	vmov	d0, r0, r1
 8005a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8005aa6:	40df      	lsrs	r7, r3
 8005aa8:	4207      	tst	r7, r0
 8005aaa:	d0f4      	beq.n	8005a96 <floor+0x96>
 8005aac:	a30e      	add	r3, pc, #56	@ (adr r3, 8005ae8 <floor+0xe8>)
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f7fa fb8f 	bl	80001d4 <__adddf3>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f7fa ffd1 	bl	8000a60 <__aeabi_dcmpgt>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d0c2      	beq.n	8005a48 <floor+0x48>
 8005ac2:	2c00      	cmp	r4, #0
 8005ac4:	da0a      	bge.n	8005adc <floor+0xdc>
 8005ac6:	2e14      	cmp	r6, #20
 8005ac8:	d101      	bne.n	8005ace <floor+0xce>
 8005aca:	3401      	adds	r4, #1
 8005acc:	e006      	b.n	8005adc <floor+0xdc>
 8005ace:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	40b3      	lsls	r3, r6
 8005ad6:	441d      	add	r5, r3
 8005ad8:	4545      	cmp	r5, r8
 8005ada:	d3f6      	bcc.n	8005aca <floor+0xca>
 8005adc:	ea25 0507 	bic.w	r5, r5, r7
 8005ae0:	e7b2      	b.n	8005a48 <floor+0x48>
 8005ae2:	2500      	movs	r5, #0
 8005ae4:	462c      	mov	r4, r5
 8005ae6:	e7af      	b.n	8005a48 <floor+0x48>
 8005ae8:	8800759c 	.word	0x8800759c
 8005aec:	7e37e43c 	.word	0x7e37e43c
 8005af0:	bff00000 	.word	0xbff00000
 8005af4:	000fffff 	.word	0x000fffff

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr
